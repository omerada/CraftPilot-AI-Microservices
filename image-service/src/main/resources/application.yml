server:
  port: ${SERVER_PORT:8056}
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
    max-keep-alive-requests: 100

spring:
  application:
    name: image-service
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      acks: 1
      retries: 3
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      compression-type: snappy
      properties:
        spring.json.add.type.headers: false
        linger.ms: 5
    consumer:
      group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:image-service-group}
      auto-offset-reset: ${SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.craftpilot.imageservice.model"
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
      use-key-prefix: true
      key-prefix: craftpilot
  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:13579ada}
    timeout: 5000
    connect-timeout: 5000
    lettuce:
      pool:
        max-active: 16
        max-idle: 8
        min-idle: 4
        max-wait: 2000ms
      shutdown-timeout: 500ms
  main:
    web-application-type: reactive
  codec:
    max-in-memory-size: 32MB
  cloud:
    gcp:
      project-id: ${SPRING_CLOUD_GCP_PROJECT_ID:craft-pilot-ai}
      credentials:
        location: file:/gcp-credentials.json
      firestore:
        enabled: true
      storage:
        enabled: true
    kubernetes:
      config:
        enabled: true
        name: image-service-config
      reload:
        enabled: true
        mode: polling
        period: 1000
      discovery:
        all-namespaces: false
    loadbalancer:
      ribbon:
        enabled: false
      cache:
        enabled: true
        caffeine:
          spec: expireAfterWrite=5s
    discovery:
      enabled: true
      client:
        health-indicator:
          enabled: true
        simple:
          instances:
            eureka-server:
              - uri: http://eureka-server:8761
                metadata:
                  management.port: ${management.server.port:8761}

logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    com.craftpilot: ${LOGGING_LEVEL_COM_CRAFTPILOT:DEBUG}
    org.springframework.data.redis: INFO
    org.springframework.kafka: INFO
    com.google.cloud: INFO
    org.springframework.web: INFO
    org.springframework.data: INFO

eureka:
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${server.port}
    metadata-map:
      zone: primary
      profile: ${spring.profiles.active}
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://eureka-server:8761/eureka/}
    registry-fetch-interval-seconds: 5
    register-with-eureka: true
    fetch-registry: true
    eureka-server-connect-timeout-seconds: 5
    eureka-server-read-timeout-seconds: 10
    eureka-connection-idle-timeout-seconds: 30
    eureka-server-total-connections: 200
    eureka-server-total-connections-per-host: 50
    eureka-service-url-poll-interval-seconds: 5
    initial-instance-info-replication-interval-seconds: 5
    instance-info-replication-interval-seconds: 5
    service-url:
      defaultZone: http://${EUREKA_USERNAME:craftpilot}:${EUREKA_PASSWORD:13579ada}@${EUREKA_HOST:eureka-server}:${EUREKA_PORT:8761}/eureka/

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    livenessstate:
      enabled: ${MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED:true}
    readinessstate:
      enabled: ${MANAGEMENT_HEALTH_READINESSSTATE_ENABLED:true}
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms
    export:
      prometheus:
        enabled: true

resilience4j:
  circuitbreaker:
    instances:
      default:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
  retry:
    instances:
      default:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  ratelimiter:
    instances:
      default:
        limitForPeriod: 10
        limitRefreshPeriod: 1s
        timeoutDuration: 0
  bulkhead:
    instances:
      default:
        maxConcurrentCalls: 100

image:
  storage:
    bucket-name: ${IMAGE_STORAGE_BUCKET_NAME}
    base-path: images
  processing:
    max-file-size: 10MB
    allowed-types: image/jpeg,image/png,image/gif,image/webp
    thumbnail:
      sizes: 150x150,300x300,600x600
      quality: 0.8
    compression:
      quality: 0.85
      max-width: 2000
      max-height: 2000
  cache:
    ttl-minutes: 60
    max-size: 1000

openai:
  api-key: ${OPENAI_API_KEY:your-api-key-here}
  model: ${OPENAI_MODEL:dall-e-3}
  size: ${OPENAI_SIZE:1024x1024}
  quality: ${OPENAI_QUALITY:standard}
  style: ${OPENAI_STYLE:vivid}

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    disable-swagger-default-url: true
  api-docs:
    path: /v3/api-docs
    enabled: true
  packages-to-scan: com.craftpilot.imageservice.controller
  paths-to-match: /**
