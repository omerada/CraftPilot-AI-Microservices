server:
  port: 8080
  ssl:
    enabled: false
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: api-gateway
  security:
    basic:
      enabled: false
  cloud:
    config:
      enabled: false
    discovery:
      enabled: true
      client:
        composite-indicator:
          enabled: false
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      globalcors:
        corsConfigurations:
          "[/**]":
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
      routes:
        # Core Services
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/users/**,/api/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker
                fallbackUri: forward:/fallback/user

        # Business Services
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/api/admin/**,/api/management/**
          filters:
            - name: CircuitBreaker
              args:
                name: adminServiceCircuitBreaker
                fallbackUri: forward:/fallback

        - id: analytics-service
          uri: lb://analytics-service
          predicates:
            - Path=/api/analytics/**,/api/reports/**,/api/metrics/**
          filters:
            - name: CircuitBreaker
              args:
                name: analyticsServiceCircuitBreaker
                fallbackUri: forward:/fallback

        - id: llm-service
          uri: lb://llm-service
          predicates:
            - Path=/api/questions/**,/api/chat/**,/api/completions/**
          filters:
            - name: CircuitBreaker
              args:
                name: llmServiceCircuitBreaker
                fallbackUri: forward:/fallback

        - id: image-service
          uri: lb://image-service
          predicates:
            - Path=/api/images/**,/api/media/**
          filters:
            - name: CircuitBreaker
              args:
                name: imageServiceCircuitBreaker
                fallbackUri: forward:/fallback

        - id: credit-service
          uri: lb://credit-service
          predicates:
            - Path=/api/credits/**,/api/payments/**,/api/billing/**
          filters:
            - name: CircuitBreaker
              args:
                name: creditServiceCircuitBreaker
                fallbackUri: forward:/fallback

        - id: subscription-service
          uri: lb://subscription-service
          predicates:
            - Path=/api/subscriptions/**,/api/plans/**
          filters:
            - name: CircuitBreaker
              args:
                name: subscriptionServiceCircuitBreaker
                fallbackUri: forward:/fallback

        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/api/notifications/**,/api/messages/**
          filters:
            - name: CircuitBreaker
              args:
                name: notificationServiceCircuitBreaker
                fallbackUri: forward:/fallback

      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin
        - AddResponseHeader=Access-Control-Allow-Origin, *
        - AddResponseHeader=Access-Control-Allow-Methods, GET,POST,PUT,DELETE,OPTIONS,HEAD
        - AddResponseHeader=Access-Control-Allow-Headers, Origin,Content-Type,Accept,Authorization,X-Request-With
        - AddResponseHeader=Access-Control-Max-Age, 3600
      httpclient:
        connect-timeout: 5000
        response-timeout: 5000
    loadbalancer:
      cache:
        enabled: true
        caffeine:
          spec: maximumSize=500,expireAfterWrite=5s
  jackson:
    deserialization:
      UNWRAP_ROOT_VALUE: true
      FAIL_ON_UNKNOWN_PROPERTIES: false
      ACCEPT_SINGLE_VALUE_AS_ARRAY: true
    serialization:
      WRAP_ROOT_VALUE: true
      FAIL_ON_EMPTY_BEANS: false
    mapper:
      ACCEPT_CASE_INSENSITIVE_PROPERTIES: true
      DEFAULT_VIEW_INCLUSION: true

eureka:
  instance:
    prefer-ip-address: false
    hostname: api-gateway
    instance-id: ${spring.application.name}:${random.uuid}
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30
    metadata-map:
      zone: primary
      profile: ${spring.profiles.active:prod}
      management.context-path: ${server.servlet.context-path:/}actuator
  client:
    service-url:
      defaultZone: http://craftpilot:13579ada@eureka-server:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
    registry-fetch-interval-seconds: 5
    should-enforce-registration-at-init: true
    enabled: true
    use-dns-for-fetching-service-urls: false
    registry:
      availability-zones:
        default: defaultZone

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] %-5level %logger{36} - %msg%n"
  level:
    com.craftpilot.apigateway: ${LOG_LEVEL:INFO}
    org.springframework.cloud.gateway: ${LOG_LEVEL:INFO}
    org.springframework.cloud.netflix.eureka: ${LOG_LEVEL:INFO}
    com.netflix.discovery: ${LOG_LEVEL:INFO}
