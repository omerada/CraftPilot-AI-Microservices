server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: api-gateway
  security:
    basic:
      enabled: false # Disable basic auth globally
    filter:
      order: 1
  cloud:
    config:
      enabled: false
    discovery:
      enabled: true
      client:
        composite-indicator:
          enabled: false
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        # Core Services
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/users/**,/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 40
                key-resolver: "#{@userKeyResolver}"

        - id: auth-service
          uri: lb://user-service
          predicates:
            - Path=/auth/**
          filters:
            - StripPrefix=0
            - PreserveHostHeader

        # Business Services
        - id: admin-service
          uri: lb://admin-service
          predicates:
            - Path=/admin/**
          filters:
            - StripPrefix=1

        - id: analytics-service
          uri: lb://analytics-service
          predicates:
            - Path=/analytics/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: analyticsServiceCircuitBreaker

        - id: llm-service
          uri: lb://llm-service
          predicates:
            - Path=/ai/**
            - Method=GET,POST,PUT,DELETE,OPTIONS
          filters:
            - name: CircuitBreaker
              args:
                name: llmServiceCircuitBreaker
                fallbackUri: forward:/fallback/llm-service
            - PreserveHostHeader
            - name: RequestSize
              args:
                maxSize: 10MB
            - RemoveRequestHeader=www-authenticate
            - name: AddRequestHeader
              args:
                name: X-Forwarded-Prefix
                value: /ai
            - name: AddRequestHeader
              args:
                name: X-Skip-Authentication
                value: "true"
            - StripPrefix=1

        - id: image-service
          uri: lb://image-service
          predicates:
            - Path=/images/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: imageServiceCircuitBreaker

        - id: credit-service
          uri: lb://credit-service
          predicates:
            - Path=/credits/**
          filters:
            - name: CircuitBreaker
              args:
                name: creditServiceCircuitBreaker

        - id: subscription-service
          uri: lb://subscription-service
          predicates:
            - Path=/subscriptions/**,/subscription-plans/**,/payments/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: subscriptionServiceCircuitBreaker

        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/notifications/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: notificationServiceCircuitBreaker

  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:13579ada}

  httpclient:
    connect-timeout: 30000
    response-timeout: 30000
    pool:
      max-idle-time: 15s
      max-connections: 1000
      type: ELASTIC
      metrics: true
      acquire-timeout: 60000

  loadbalancer:
    cache:
      enabled: true
      caffeine:
        spec: maximumSize=500,expireAfterWrite=5s

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    consumer:
      group-id: api-gateway-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: "*"

  gateway:
    default-filters:
      - RemoveRequestHeader=Cookie
      - AddResponseHeader=X-Powered-By,Craft-Pilot-API-Gateway
      - name: RequestSize
        args:
          maxSize: 10MB
    # CORS yapılandırmasını kaldırdık ve DedupeResponseHeader filtresini de kaldırıyoruz
    # CORS kontrolü artık CorsWebFilter tarafından yapılacak

eureka:
  instance:
    prefer-ip-address: false
    hostname: ${HOSTNAME:api-gateway}
    instance-id: ${spring.application.name}:${random.uuid}
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30
    metadata-map:
      zone: primary
      profile: ${spring.profiles.active:prod}
      management.context-path: ${server.servlet.context-path:/actuator}
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://craftpilot:${EUREKA_PASSWORD:13579ada}@eureka-server:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true
    registry-fetch-interval-seconds: 5
    should-enforce-registration-at-init: true
    enabled: true
    use-dns-for-fetching-service-urls: false
    availability-zones:
      default: default

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      group:
        readiness:
          include: ping,redis,diskSpace # db yerine redis ekledik
        liveness:
          include: ping
  health:
    circuitbreakers:
      enabled: true
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    redis:
      enabled: true # Redis health check'i aktif edildi
    diskspace:
      enabled: true
    validate-group-membership: true

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{traceId}/%X{spanId}] %-5level %logger{36} - %msg%n"
  level:
    root: INFO
    com.craftpilot.apigateway: DEBUG
    org.springframework.cloud.gateway: INFO
    org.springframework.cloud.netflix.eureka: ${LOG_LEVEL:INFO}
    com.netflix.discovery: ${LOG_LEVEL:INFO}
    com.craftpilot.apigateway.security: ${SECURITY_LOG_LEVEL:INFO}
    org.springframework.security: INFO
    reactor.netty.http.client: INFO
    reactor.netty: INFO

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowType: TIME_BASED
        slidingWindowSize: 60
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        eventConsumerBufferSize: 100
    instances:
      llmServiceCircuitBreaker:
        baseConfig: default
        slidingWindowSize: 30
        waitDurationInOpenState: 30s
        failureRateThreshold: 60
        permittedNumberOfCallsInHalfOpenState: 5
        registerHealthIndicator: true
        allowHealthIndicatorToFail: false
        ignoreExceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException
      userServiceCircuitBreaker:
        baseConfig: default
  timelimiter:
    configs:
      default:
        timeoutDuration: 10s
        cancelRunningFuture: true
    instances:
      userServiceTimeLimiter:
        timeoutDuration: 5s
      llmServiceTimeLimiter:
        timeoutDuration: 60s

kafka:
  topics:
    user-preferences: user-preferences
    user-activity: user-activity
    system-events: system-events
