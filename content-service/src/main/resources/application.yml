server:
  port: 8088
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
    max-keep-alive-requests: 100

spring:
  application:
    name: content-service
  config:
    import: "optional:configserver:"
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      acks: ${KAFKA_PRODUCER_ACKS:1}
      retries: ${KAFKA_PRODUCER_RETRIES:3}
      batch-size: ${KAFKA_PRODUCER_BATCH_SIZE:16384}
      buffer-memory: ${KAFKA_PRODUCER_BUFFER_MEMORY:33554432}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      compression-type: ${KAFKA_PRODUCER_COMPRESSION_TYPE:snappy}
      properties:
        spring.json.add.type.headers: false
        linger.ms: ${KAFKA_PRODUCER_LINGER_MS:5}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID:content-service-group}
      auto-offset-reset: ${KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.craftpilot.contentservice.model"
  cache:
    type: redis
    redis:
      time-to-live: ${REDIS_TTL:3600000}
      cache-null-values: false
      use-key-prefix: true
      key-prefix: ${REDIS_KEY_PREFIX:craftpilot}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
  webflux:
    base-path: /api/v1
  main:
    web-application-type: reactive
  codec:
    max-in-memory-size: 16MB
  cloud:
    gcp:
      project-id: ${GCP_PROJECT_ID:craft-pilot-ai}
      firestore:
        project-id: ${GCP_FIRESTORE_PROJECT_ID:craft-pilot-ai}
        database-id: ${GCP_FIRESTORE_DATABASE_ID:craft-pilot-ai}
        credentials:
          location: ${GCP_CREDENTIALS_LOCATION:classpath:firebase-service-account.json}
    config:
      enabled: false
  kubernetes:
    config:
      enabled: true
      name: content-service-config
    reload:
      enabled: true
      mode: polling
      period: 1000
    discovery:
      all-namespaces: false

logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    com.craftpilot: ${LOGGING_LEVEL_COM_CRAFTPILOT:DEBUG}
    org.springframework.data.redis: INFO
    org.springframework.kafka: INFO
    com.google.cloud: INFO
    org.springframework.web: INFO
    org.springframework.data: INFO

eureka:
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
    registry-fetch-interval-seconds: 5

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  health:
    livenessstate:
      enabled: ${MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED:true}
    readinessstate:
      enabled: ${MANAGEMENT_HEALTH_READINESSSTATE_ENABLED:true}
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms
    export:
      prometheus:
        enabled: true

resilience4j:
  circuitbreaker:
    instances:
      contentService:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
  retry:
    instances:
      default:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  ratelimiter:
    instances:
      contentService:
        limitForPeriod: 10
        limitRefreshPeriod: 1s
        timeoutDuration: 3s
  bulkhead:
    instances:
      default:
        maxConcurrentCalls: 100

openai:
  api-key: ${OPENAI_API_KEY}
  model: ${OPENAI_MODEL:gpt-4}
  max-tokens: ${OPENAI_MAX_TOKENS:2000}
  temperature: ${OPENAI_TEMPERATURE:0.7}

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
