server:
  port: 8062
  compression:
    enabled: true
    mime-types: text/event-stream,application/json,text/plain
    min-response-size: 1024
  shutdown: graceful
  netty:
    connection-timeout: 60000 # 1 dakika (daha makul bir değer)
    idle-timeout: 60000 # 1 dakika
    max-keep-alive-requests: 1000 # Daha makul bir değer
    threads:
      worker: 4
      boss: 1
    validate-headers: true
    max-connections: 10000
    max-initial-line-length: 8192
    max-header-size: 16384
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never
    include-exception: false
  http2:
    enabled: true

spring:
  application:
    name: llm-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:prod}
    # Kafka profilini isteğe bağlı hale getir
    include: ${KAFKA_ENABLED:false} ? kafka-base
  main:
    web-application-type: reactive
    allow-bean-definition-overriding: true
    # Kafka olmazsa hata vermemesi için ekleyin
    allow-circular-references: true
  codec:
    max-in-memory-size: 16MB
  # Redis ayarları
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:13579ada}
      timeout: 5000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
          max-wait: 1000ms
  # Cache ayarları
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
      use-key-prefix: true
  # Kafka yapılandırmasını ekleyelim/düzenleyelim
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    producer:
      retries: 3
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# WebClient yapılandırması
webclient:
  timeout: 30000
  max-in-memory-size: 10485760
  connection:
    max-connections: 50
    acquire-timeout: 15
    max-idle-time: 30
    max-life-time: 300
    eviction-interval: 120

# Kullanıcı bellek servisi yapılandırması
user-memory:
  service:
    url: http://user-memory-service:8067
    # Kubernetes veya Docker Compose ortamında servis adı kullanılır
    # Lokal geliştirme için localhost:8067 olarak değiştirilebilir

# Activity logging yapılandırması
activity:
  service-name-prefix: LLM
  kafka-topic: user-activity

# Eureka ayarları
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://craftpilot:13579ada@eureka-server:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
    instance-info-replication-interval-seconds: 10
    registry-fetch-interval-seconds: 5
  instance:
    prefer-ip-address: true
    hostname: ${HOSTNAME:llm-service}
    lease-renewal-interval-in-seconds: 10
    health-check-url-path: /health
    status-page-url-path: /actuator/info
    home-page-url: http://${eureka.instance.hostname}:${server.port}/
    instance-id: ${spring.application.name}:${server.port}:${random.uuid}

# Actuator ayarları
management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      group:
        readiness:
          include: "*"
        liveness:
          include: ping,diskSpace
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

# OpenRouter API ayarları
openrouter:
  api:
    key: ${OPENROUTER_API_KEY}
    url: https://openrouter.ai/api/v1
    defaultModel: google/gemini-2.0-flash-lite-001
    maxTokens: 2000
    temperature: 0.7
    retryAttempts: 3
    retryDelay: 1000
    http-referer: https://craftpilot.io
  requestTimeoutSeconds: 60
  streamTimeoutSeconds: 120
  keepAliveIntervalSeconds: 5
  defaultModel: google/gemini-pro

# Logging ayarları
logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] %-5level %logger{36} - %msg%n"
  level:
    root: INFO
    com.craftpilot: DEBUG
    org.springframework.web: INFO
    reactor.netty: INFO
    io.netty: INFO
    com.craftpilot.llmservice: DEBUG
    com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: WARN
    com.google.cloud.firestore.CustomClassMapper: ERROR

netty:
  native:
    enabled: false
  io:
    noNative: true
    noUnsafe: true
  use-native-transport: true
  workdir: /tmp/netty

# Resilience4j ayarları
resilience4j:
  circuitbreaker:
    instances:
      llmService:
        slidingWindowSize: 50
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
      openRouterApiCircuit:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        registerHealthIndicator: true
        recordExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.reactive.function.client.WebClientResponseException
          - com.craftpilot.llmservice.exception.APIException
      userMemoryService:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        recordExceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException
          - java.util.concurrent.TimeoutException
          - java.io.IOException

  ratelimiter:
    instances:
      llmService:
        limitForPeriod: 50
        limitRefreshPeriod: 1s
  retry:
    instances:
      openRouterApiCircuit:
        maxRetryAttempts: 3
        waitDuration: 500ms
        retryExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.reactive.function.client.WebClientResponseException
      userMemoryService:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

lighthouse:
  service:
    url: ${LIGHTHOUSE_SERVICE_URL:http://lighthouse-service:8085}

service:
  user-memory:
    url: ${USER_MEMORY_SERVICE_URL:http://user-memory-service:8067}

ai:
  model:
    extraction: anthropic/claude-3-haiku  # Daha güçlü bir model kullan

# Extraksiyon ayarları
extraction:
  timeout:
    seconds: 30
  memory:
    timeout:
      seconds: 15
  retry:
    max: 3
    backoff:
      ms: 500

memory:
  timeout:
    seconds: 10

user-info-extraction:
  debug: true
  save-all-messages: false

user-memory:
  non-meaningful-strings: >
    Kullanıcı mesaj gönderdi,
    Mesajdan bilgi çıkarılamadı,
    Kullanıcıdan bilgi çıkarılamadı,
    NO_INFORMATION,
    EXTRACTION_ERROR,
    PARSING_ERROR,
    INVALID_RESPONSE_FORMAT
