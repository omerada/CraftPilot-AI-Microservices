server:
  port: 8062
  compression:
    enabled: true
    mime-types: application/json,text/plain
    min-response-size: 1024
  shutdown: graceful

spring:
  application:
    name: llm-service
  webflux:
    base-path: /api
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    producer:
      retries: 3
      acks: 1
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
        spring.json.type.mapping: aiEvent:com.craftpilot.llmservice.event.AIEvent
        retries: 3
        delivery.timeout.ms: 120000
        request.timeout.ms: 30000
        retry.backoff.ms: 1000
        max.block.ms: 60000
    consumer:
      group-id: ${spring.application.name}-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.craftpilot.*"
        isolation.level: read_committed
        max.poll.interval.ms: 300000
        session.timeout.ms: 45000
        heartbeat.interval.ms: 10000
  webclient:
    max-in-memory-size: 16MB
    connect-timeout: 5000
    read-timeout: 5000
    write-timeout: 5000
  cloud:
    gcp:
      firestore:
        enabled: true
        project-id: ${GCP_PROJECT_ID:your-project-id}
    loadbalancer:
      ribbon:
        enabled: false
    discovery:
      enabled: true
  security:
    user:
      name: ${SPRING_SECURITY_USER_NAME:craftpilot}
      password: ${SPRING_SECURITY_USER_PASSWORD:13579ada}

  redis:
    host: ${SPRING_REDIS_HOST:redis}
    port: ${SPRING_REDIS_PORT:6379}
    password: ${SPRING_REDIS_PASSWORD:13579ada}
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 2
        max-wait: -1ms
      shutdown-timeout: 100ms
    connect-timeout: 2000ms
    timeout: 1000ms

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://craftpilot:13579ada@localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${server.port}
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      group:
        readiness:
          include: redis,diskSpace,kafka
        liveness:
          include: ping
  health:
    redis:
      enabled: true
    kafka:
      enabled: true
    circuitbreakers:
      enabled: true
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    validate-group-membership: false

openrouter:
  api-key: ${OPENROUTER_API_KEY:your-api-key}
  base-url: ${OPENROUTER_BASE_URL:https://openrouter.ai/api/v1}
  default-model: ${OPENROUTER_DEFAULT_MODEL:openai/gpt-3.5-turbo}
  max-tokens: ${OPENROUTER_MAX_TOKENS:2000}
  temperature: ${OPENROUTER_TEMPERATURE:0.7}
  retry-attempts: ${OPENROUTER_RETRY_ATTEMPTS:3}
  retry-delay: ${OPENROUTER_RETRY_DELAY:1000}

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] %-5level %logger{36} - %msg%n"
  level:
    com.craftpilot.llmservice: ${LOG_LEVEL:INFO}
    org.springframework.web: ${LOG_LEVEL:INFO}
    org.springframework.data: ${LOG_LEVEL:INFO}
    org.springframework.cloud.loadbalancer: ERROR
    org.springframework.cloud.client: ERROR
    org.netflix.discovery: ERROR
    org.springframework.data.redis: ERROR
    org.apache.kafka: WARN
    org.apache.commons.logging: ERROR

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
    instances:
      openRouter:
        baseConfig: default
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s
    instances:
      openRouter:
        baseConfig: default
