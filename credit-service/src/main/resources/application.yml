server:
  port: 8058
  compression:
    enabled: true
    mime-types: application/json,text/plain
    min-response-size: 1024
  shutdown: graceful

spring:
  application:
    name: credit-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:prod}
    include: kafka-base
  security:
    user:
      name: ${SPRING_SECURITY_USER_NAME:craftpilot}
      password: ${SPRING_SECURITY_USER_PASSWORD:13579ada}
  cloud:
    discovery:
      enabled: true
    loadbalancer:
      cache:
        enabled: true
        caffeine:
          spec: expireAfterWrite=5s
      ribbon:
        enabled: false
    circuit-breaker:
      enabled: true
    function:
      definition: metricsEventConsumer
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
          configuration:
            security.protocol: PLAINTEXT
        bindings:
          metricsEventProducer-out-0:
            producer:
              configuration:
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
                value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
          metricsEventConsumer-in-0:
            consumer:
              configuration:
                key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value.deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
                spring.json.trusted.packages: "com.craftpilot.creditservice.event"
      bindings:
        metricsEventProducer-out-0:
          destination: metrics-events
          contentType: application/json
        metricsEventConsumer-in-0:
          destination: metrics-events
          group: credit-service
          contentType: application/json
  main:
    web-application-type: reactive
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://${MONGO_ROOT_USERNAME:craftpilot}:${MONGO_ROOT_PASSWORD:secure_password}@${MONGODB_HOST:craftpilot-mongodb}:27017/${MONGO_INITDB_DATABASE:craftpilot}?authSource=admin&retryWrites=true&w=majority&serverSelectionTimeoutMS=30000&connectTimeoutMS=20000&socketTimeoutMS=60000}
      database: ${MONGODB_DATABASE:craftpilot}
      connection-timeout: 30000
      socket-timeout: 60000
      max-connection-idle-time: 300000
      connection-pool-max-size: 20
      auto-index-creation: true

# Kafka özel yapılandırmaları
kafka:
  topics:
    credit-events: credit-events
    payment-events: payment-events

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    redis:
      enabled: false # Disable Redis health check if you don't need it
    circuitbreakers:
      enabled: true
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    validate-group-membership: false

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka}
    register-with-eureka: true
    fetch-registry: true
    healthcheck:
      enabled: true
  instance:
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${server.port}
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 30
    health-check-url-path: /actuator/health
    statusPageUrlPath: /actuator/info
    metadataMap:
      instanceId: ${spring.application.name}:${server.port}
      zone: primary
      profile: ${spring.profiles.active}

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  api-docs:
    path: /v3/api-docs
    enabled: true

redis:
  host: ${REDIS_HOST:redis}
  port: ${REDIS_PORT:6379}
  password: ${REDIS_PASSWORD:13579ada}
  lettuce:
    pool:
      max-active: 8
      max-idle: 8
      min-idle: 2
      max-wait: -1ms
    shutdown-timeout: 100ms
  connect-timeout: 2000ms
  timeout: 1000ms

resilience4j:
  circuitbreaker:
    instances:
      analyticsService:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
  ratelimiter:
    instances:
      analyticsService:
        limitForPeriod: 50
        limitRefreshPeriod: 1s
        timeoutDuration: 5s

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] [%X{userId}] %-5level %logger{36} - %msg%n"
  level:
    com.craftpilot.analyticsservice: ${LOG_LEVEL:INFO}
    org.springframework.web: ${LOG_LEVEL:INFO}
    org.springframework.data: ${LOG_LEVEL:INFO}
    org.springframework.cloud.loadbalancer: ERROR
    org.springframework.cloud.client: ERROR
    com.netflix.discovery: ERROR
    org.springframework.data.redis: ERROR
    org.apache.kafka: WARN
    org.apache.commons.logging: ERROR

cors:
  allowed-origins: "*"
  allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
  allowed-headers: "*"
  exposed-headers: "Authorization,Link,X-Total-Count"
  allow-credentials: true
  max-age: 1800
