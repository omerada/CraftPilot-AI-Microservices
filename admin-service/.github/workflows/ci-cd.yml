name: Admin Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "admin-service/**"
  pull_request:
    branches: [master]
    paths:
      - "admin-service/**"

env:
  SERVICE_NAME: admin-service
  DOCKER_IMAGE: craftpilot/admin-service
  SERVICE_PORT: 8097

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Build with Maven
        run: |
          cd ${{ env.SERVICE_NAME }}
          mvn clean package -DskipTests

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ env.SERVICE_NAME }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create config directory if not exists
            mkdir -p /opt/craftpilot/config

            # Write GCP credentials to file
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/config/firebase-service-account.json

            # Pull latest image
            docker pull ${{ env.DOCKER_IMAGE }}:latest

            # Stop and remove existing container
            docker stop ${{ env.SERVICE_NAME }} || true
            docker rm ${{ env.SERVICE_NAME }} || true

            # Run new container
            docker run -d \
              --name ${{ env.SERVICE_NAME }} \
              --network craftpilot-network \
              -p ${{ env.SERVICE_PORT }}:${{ env.SERVICE_PORT }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/ \
              -e SPRING_REDIS_HOST=redis \
              -e SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092 \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/config/firebase-service-account.json \
              -v /opt/craftpilot/config/firebase-service-account.json:/app/config/firebase-service-account.json:ro \
              ${{ env.DOCKER_IMAGE }}:latest

            # Health check
            echo "Waiting for service to start..."
            sleep 30
            if curl -f http://localhost:${{ env.SERVICE_PORT }}/actuator/health; then
              echo "Service is healthy"
            else
              echo "Service failed health check"
              docker logs ${{ env.SERVICE_NAME }}
              exit 1
            fi

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
