name: Translation Service CI/CD

on:
  push:
    branches: [main]
    paths:
      - "translation-service/**"
  pull_request:
    branches: [main]
    paths:
      - "translation-service/**"

env:
  SERVICE_NAME: translation-service
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/translation-service

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build and Test
        run: |
          cd translation-service
          mvn clean verify

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: translation-service/target/surefire-reports

      - name: Upload Coverage Report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: translation-service/target/site/jacoco

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Translation Service"
          path: "translation-service"
          format: "HTML"

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: reports

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  sonar-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=craft-pilot-translation-service
            -Dsonar.organization=craft-pilot
            -Dsonar.sources=translation-service/src/main/java
            -Dsonar.tests=translation-service/src/test/java
            -Dsonar.java.binaries=translation-service/target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=translation-service/target/site/jacoco/jacoco.xml

  performance-test:
    needs: [security-scan, sonar-analysis]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run k6 Load Test
        run: |
          cd translation-service/src/test/k6
          k6 run load-test.js

  build-and-push-image:
    needs: [performance-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./translation-service
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-k8s:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: |
          cd k8s
          kubectl apply -f translation-service/
          kubectl rollout restart deployment translation-service -n craft-pilot
          kubectl rollout status deployment translation-service -n craft-pilot --timeout=180s
