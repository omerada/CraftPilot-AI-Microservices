version: "3.8"

x-common-variables: &common-variables
  SPRING_PROFILES_ACTIVE: prod
  EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092 # Düzeltildi: 9092'den 9092'ye
  GOOGLE_APPLICATION_CREDENTIALS: /gcp-credentials.json
  MANAGEMENT_ENDPOINTS_WEB_BASE_PATH: /actuator
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
  MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
  LOGGING_PATTERN_CONSOLE: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

x-common-deploy: &common-deploy
  deploy:
    resources:
      limits:
        cpus: "1"
        memory: 1G
      reservations:
        cpus: "0.25"
        memory: 512M
    restart_policy:
      condition: on-failure
      max_attempts: 3
      window: 120s

networks:
  craftpilot-network:
    name: craftpilot-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/16

services:
  # Redis service configuration
  redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.10
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Zookeeper configuration
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.11
    <<: *common-deploy
    healthcheck:
      test: echo ruok | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka configuration
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "9092:9092" # Ana port değişikliği
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.12
    <<: *common-deploy
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Discovery
  eureka-server:
    image: ${DOCKERHUB_USERNAME}/eureka-server:latest-arm64
    environment:
      <<: *common-variables
      SERVER_PORT: 8761
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
      SPRING_SECURITY_USER_NAME: craftpilot
      SPRING_SECURITY_USER_PASSWORD: ${EUREKA_PASSWORD}
    ports:
      - "8761:8761"
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.13
    <<: *common-deploy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8761/actuator/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    image: ${DOCKERHUB_USERNAME}/api-gateway:latest-arm64
    environment:
      <<: *common-variables
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - ${GCP_SA_KEY_PATH}:/app/gcp-credentials.json:ro
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.14
    depends_on:
      eureka-server:
        condition: service_healthy
    <<: *common-deploy

  # Redis Service
  redis-service:
    image: ${DOCKERHUB_USERNAME}/redis-service:latest-arm64
    container_name: redis-service
    ports:
      - "8079:8079"
    environment:
      <<: *common-variables
      SPRING_CLOUD_GCP_SA_KEY_LOCATION: file:/app/gcp-credentials.json
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-craft-pilot-ai}
    volumes:
      - ${GCP_SA_KEY_PATH:-./redis-service/src/main/resources/firebase-service-account.json}:/app/gcp-credentials.json:ro
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.15
    depends_on:
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8079/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # KAFKA Service
  kafka-service:
    container_name: kafka-service
    image: ${DOCKERHUB_USERNAME}/kafka-service:latest-arm64
    ports:
      - "9093:9093"
    environment:
      <<: *common-variables
      SERVER_PORT: 9093
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.16
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9093/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LLM Service
  llm-service:
    build:
      context: ./llm-service
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    image: ${DOCKERHUB_USERNAME}/llm-service:latest-arm64
    container_name: llm-service
    ports:
      - "8062:8062"
    environment:
      <<: *common-variables
    volumes:
      - ${GCP_SA_KEY_PATH:-./llm-service/src/main/resources/firebase-service-account.json}:/app/gcp-credentials.json:ro
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.17
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8062/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Credit Service
  credit-service:
    container_name: credit-service
    build:
      context: .
      dockerfile: credit-service/Dockerfile
    ports:
      - "8058:8058"
    environment:
      <<: *common-variables
      SPRING_PROFILES_ACTIVE: docker
      FIREBASE_CREDENTIAL_PATH: /app/config/firebase-service-account.json
      SPRING_SECURITY_USER_NAME: ${EUREKA_USERNAME}
      SPRING_SECURITY_USER_PASSWORD: ${EUREKA_PASSWORD}
    volumes:
      - ./credit-service/src/main/resources/firebase-service-account.json:/app/config/firebase-service-account.json
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.18
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8058/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Subscription Service
  subscription-service:
    container_name: subscription-service
    image: ${DOCKERHUB_USERNAME}/subscription-service:latest-arm64
    ports:
      - "8052:8052"
    environment:
      <<: *common-variables
      EUREKA_INSTANCE_HOSTNAME: subscription-service
    volumes:
      - ${GCP_SA_KEY_PATH:-./subscription-service/src/main/resources/firebase-service-account.json}:/gcp-credentials/credentials.json:ro
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.19
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8052/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # User Service
  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
      - "8060:8060"
    environment:
      <<: *common-variables
      SPRING_PROFILES_ACTIVE: docker
      FIREBASE_CREDENTIAL_PATH: /app/config/firebase-service-account.json
      SPRING_SECURITY_USER_NAME: ${EUREKA_USERNAME}
      SPRING_SECURITY_USER_PASSWORD: ${EUREKA_PASSWORD}
    volumes:
      - ./user-service/src/main/resources/firebase-service-account.json:/app/config/firebase-service-account.json
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.20
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8060/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    image: ${DOCKERHUB_USERNAME}/notification-service:latest-arm64
    container_name: notification-service
    ports:
      - "8053:8053"
    environment:
      <<: *common-variables
      SPRING_CLOUD_GCP_CREDENTIALS_LOCATION: file:/app/config/service-account.json
      GMAIL_SERVICE_ACCOUNT: ${GMAIL_SERVICE_ACCOUNT}
    volumes:
      - ${GCP_SA_KEY_PATH}:/app/config/service-account.json:ro
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.21
    depends_on:
      eureka-server:
        condition: service_healthy
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8053/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    container_name: analytics-service
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    image: ${DOCKERHUB_USERNAME}/analytics-service:latest-arm64
    ports:
      - "8064:8064"
    environment:
      <<: *common-variables
      SPRING_PROFILES_ACTIVE: docker
      FIREBASE_CREDENTIAL_PATH: /app/config/firebase-service-account.json
    volumes:
      - ${GCP_SA_KEY_PATH}:/app/config/firebase-service-account.json:ro
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.22
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8064/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Service
  admin-service:
    image: ${DOCKERHUB_USERNAME}/admin-service:latest-arm64
    container_name: admin-service
    ports:
      - "8081:8081"
    environment:
      <<: *common-variables
      SPRING_CLOUD_GCP_SA_KEY_LOCATION: file:/app/gcp-credentials.json
      GCP_PROJECT_ID: ${GCP_PROJECT_ID:-craft-pilot-ai}
    volumes:
      - ${GCP_SA_KEY_PATH:-./admin-service/src/main/resources/firebase-service-account.json}:/app/gcp-credentials.json:ro
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.23
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.49.1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.24
    <<: *common-deploy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  grafana:
    image: grafana/grafana:10.3.1
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      craftpilot-network:
        ipv4_address: 172.18.0.25
    <<: *common-deploy
    healthcheck:
      test:
        ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

secrets:
  gcp_credentials:
    file: ${GCP_SA_KEY_PATH}
  redis_password:
    file: ${REDIS_PASSWORD_FILE:-/dev/null}
