server:
  port: 8062
  ssl:
    enabled: ${SSL_ENABLED:false}

spring:
  application:
    name: aiquestion-service
  cloud:
    kubernetes:
      enabled: ${KUBERNETES_ENABLED:false}
      config:
        enabled: true
      reload:
        enabled: true
    discovery:
      enabled: true
    loadbalancer:
      ribbon:
        enabled: false
    gcp:
      project-id: ${GCP_PROJECT_ID:craftpilot-ai}
      credentials:
        location: ${GOOGLE_APPLICATION_CREDENTIALS:classpath:firebase-service-account.json}
    function:
      definition: none
    stream:
      kafka:
        binder:
          enabled: false
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: aiquestion-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 3
      batch-size: 16384
      buffer-memory: 33554432
      acks: all
  redis:
    host: redis
    port: 6379
    password: 13579ada
    timeout: 10000
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 2
        max-wait: -1
  data:
    redis:
      repositories:
        enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761/eureka/}
    register-with-eureka: ${EUREKA_REGISTER_ENABLED:true}
    fetch-registry: ${EUREKA_FETCH_ENABLED:true}
  instance:
    prefer-ip-address: true
    hostname: ${HOSTNAME:localhost}
    lease-renewal-interval-in-seconds: 30

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  show-actuator: true

redis:
  host: ${REDIS_HOST:localhost}
  port: ${REDIS_PORT:6379}
  password: ${REDIS_PASSWORD:}
  ssl: ${REDIS_SSL_ENABLED:false}

google:
  cloud:
    project-id: ${GOOGLE_CLOUD_PROJECT_ID:craftpilot-ai}
    credentials:
      location: ${GOOGLE_APPLICATION_CREDENTIALS:classpath:firebase-service-account.json}
  api-key: ${GOOGLE_API_KEY}
  base-url: https://generativelanguage.googleapis.com/v1
  search:
    api:
      key: ${GOOGLE_SEARCH_API_KEY:your-google-search-api-key}
    engine:
      id: ${GOOGLE_SEARCH_ENGINE_ID:your-google-search-engine-id}

ai:
  openai:
    api-key: ${OPENAI_API_KEY}
    organization: ${OPENAI_ORG_ID:your-openai-org-id}
    base-url: https://api.openai.com/v1
    model: ${OPENAI_MODEL:gpt-4-turbo-preview}
    max-tokens: ${OPENAI_MAX_TOKENS:2000}
    temperature: ${OPENAI_TEMPERATURE:0.7}
  anthropic:
    api-key: ${ANTHROPIC_API_KEY}
    base-url: https://api.anthropic.com/v1
  google:
    api-key: ${GOOGLE_API_KEY}
    base-url: https://generativelanguage.googleapis.com/v1

question:
  processing:
    cron: ${QUESTION_PROCESSING_CRON:0 * * * * *}
    batch-size: ${QUESTION_PROCESSING_BATCH_SIZE:10}
    timeout-minutes: ${QUESTION_PROCESSING_TIMEOUT:5}

resilience4j:
  circuitbreaker:
    instances:
      aiService:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
  ratelimiter:
    instances:
      aiService:
        limitForPeriod: ${AI_SERVICE_RATE_LIMIT:50}
        limitRefreshPeriod: 1s
        timeoutDuration: 5s
      questionApi:
        limitForPeriod: ${QUESTION_API_RATE_LIMIT:10}
        limitRefreshPeriod: 1s
        timeoutDuration: 500ms
  retry:
    instances:
      aiService:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId},%X{spanId}] [%X{userId}] %-5level %logger{36} - %msg%n"
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.craftpilot.aiquestionservice: ${LOG_LEVEL_APP:INFO}
    org.springframework.web: ${LOG_LEVEL_SPRING_WEB:INFO}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:INFO}
