name: Activity Log Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "activity-log-service/**"
      - "craft-pilot-commons/**"
      - ".github/workflows/activity-log-service-ci-cd.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - debug

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build commons library (if needed)
        run: |
          if [ -d "craft-pilot-commons" ]; then
            cd craft-pilot-commons
            mvn clean install -DskipTests
          fi

      - name: Build with Maven
        run: |
          cd activity-log-service
          mvn clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare build context
        run: |
          # Create a temporary directory for build context
          mkdir -p /tmp/docker-build-context

          # Copy directories to build context
          cp -r activity-log-service /tmp/docker-build-context/

          # Copy craft-pilot-commons if it exists
          if [ -d "craft-pilot-commons" ]; then
            cp -r craft-pilot-commons /tmp/docker-build-context/
          fi

      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: /tmp/docker-build-context
          file: /tmp/docker-build-context/activity-log-service/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:latest-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:buildcache,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Set error handling
            set -e

            echo "Starting deployment of Activity Log Service..."

            # Check if network exists, create if needed
            if ! docker network inspect craftpilot-network >/dev/null 2>&1; then
              echo "Creating craftpilot network..."
              docker network create craftpilot-network
            fi

            # Check if required services are running
            echo "Checking required services..."
            for svc in redis kafka eureka-server; do
              if ! docker ps | grep -q $svc; then
                echo "WARNING: $svc service not running. This may cause issues."
              else
                echo "$svc is running."
              fi
            done

            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:latest-arm64

            # Stop and remove existing container if it exists
            echo "Stopping previous container if exists..."
            docker stop activity-log-service 2>/dev/null || echo "No running container found"
            docker rm activity-log-service 2>/dev/null || echo "No container to remove"

            # Setup environment variables
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            DOCKER_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            MONGODB_URI="${{ secrets.MONGODB_URI }}"

            # Deployment with proper conditional statement
            echo "Deploying Activity Log Service in ${ENVIRONMENT:-prod} mode..."

            if [ "${ENVIRONMENT}" = "debug" ]; then
              echo "Starting in DEBUG mode with remote debugging enabled"
              docker run -d \
                --name activity-log-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8095:8095 \
                -p 5010:5010 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SPRING_APPLICATION_NAME=activity-log-service \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e ACTIVITY_KAFKA_CONSUMER_TOPIC=activity-events \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e HOSTNAME=activity-log-service \
                -e SPRING_SECURITY_USER_NAME=craftpilot \
                -e SPRING_SECURITY_USER_PASSWORD=13579ada \
                -e MONGODB_URI="${MONGODB_URI}" \
                -e MONGODB_DATABASE=activitylog \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e SERVER_PORT=8095 \
                -e JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=70.0 -XX:+UseG1GC -Djava.security.egd=file:/dev/./urandom -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010" \
                "${DOCKER_USERNAME}/activity-log-service:latest-arm64"
            else
              echo "Starting in PRODUCTION mode"
              docker run -d \
                --name activity-log-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8095:8095 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SPRING_APPLICATION_NAME=activity-log-service \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e ACTIVITY_KAFKA_CONSUMER_TOPIC=activity-events \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e HOSTNAME=activity-log-service \
                -e SPRING_SECURITY_USER_NAME=craftpilot \
                -e SPRING_SECURITY_USER_PASSWORD=13579ada \
                -e MONGODB_URI="${MONGODB_URI}" \
                -e MONGODB_DATABASE=activitylog \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e SERVER_PORT=8095 \
                -e JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=70.0 -XX:+UseG1GC -Djava.security.egd=file:/dev/./urandom" \
                "${DOCKER_USERNAME}/activity-log-service:latest-arm64"
            fi

            # Check container logs immediately
            echo "Initial container logs:"
            sleep 5
            docker logs activity-log-service --tail 20

            # Verify container is running
            if ! docker ps | grep -q activity-log-service; then
              echo "Container failed to start! Checking logs..."
              docker logs activity-log-service
              exit 1
            fi

            # Health check with improved logging
            echo "Waiting for service to start..."
            max_attempts=20
            attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "Health check attempt $attempt/$max_attempts..."
              
              # Check if container is still running
              if ! docker ps | grep -q activity-log-service; then
                echo "Container stopped unexpectedly! Checking logs..."
                docker logs activity-log-service
                exit 1
              fi
              
              # Try health check with container IP to avoid host networking issues
              CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' activity-log-service)
              echo "Container IP: $CONTAINER_IP"
              
              # Try both localhost and container IP
              HEALTH_RESPONSE_LOCAL=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8095/actuator/health || echo "000")
              HEALTH_RESPONSE_CONTAINER=$(docker exec activity-log-service curl -s -o /dev/null -w "%{http_code}" http://localhost:8095/actuator/health 2>/dev/null || echo "000")
              
              echo "Health check response (localhost): $HEALTH_RESPONSE_LOCAL"
              echo "Health check response (container): $HEALTH_RESPONSE_CONTAINER"
              
              if [ "$HEALTH_RESPONSE_LOCAL" = "200" ] || [ "$HEALTH_RESPONSE_CONTAINER" = "200" ]; then
                echo "Service is healthy! Deployment successful."
                docker logs activity-log-service --tail 20
                exit 0
              else
                echo "Health checks failed. Checking application logs..."
                docker logs activity-log-service --tail 10
              fi
              
              sleep 10
              attempt=$((attempt + 1))
            done

            echo "Service failed to become healthy within timeout"
            echo "CONTAINER LOGS:"
            docker logs activity-log-service
            echo "CONTAINER NETWORK INFO:"
            docker inspect activity-log-service | grep -A 20 "Networks"
            echo "EUREKA STATUS:"
            curl -s http://craftpilot:13579ada@localhost:8761/eureka/apps/ || echo "Could not connect to Eureka"

            # Don't fail the deployment, let's keep the container running for investigation
            echo "Deployment completed with warnings - service may not be fully functional"
