name: Activity Log Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "activity-log-service/**"
      - "craft-pilot-commons/**"
      - ".github/workflows/activity-log-service-ci-cd.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - debug

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build commons library (if needed)
        run: |
          if [ -d "craft-pilot-commons" ]; then
            cd craft-pilot-commons
            mvn clean install -DskipTests
          fi

      - name: Build with Maven
        run: |
          cd activity-log-service
          mvn clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare build context
        run: |
          # Create a temporary directory for build context
          mkdir -p /tmp/docker-build-context

          # Copy directories to build context
          cp -r activity-log-service /tmp/docker-build-context/

          # Copy craft-pilot-commons if it exists
          if [ -d "craft-pilot-commons" ]; then
            cp -r craft-pilot-commons /tmp/docker-build-context/
          fi

      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: /tmp/docker-build-context
          file: /tmp/docker-build-context/activity-log-service/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:latest-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:buildcache,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment of Activity Log Service..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:latest-arm64
            docker stop activity-log-service || true
            docker rm activity-log-service || true

            # Basitleştirilmiş deploy - Credit Service modeline benzer yapı
            if [ "${{ github.event.inputs.environment }}" = "debug" ]; then
              # Debug modu
              docker run -d \
                --name activity-log-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8095:8095 \
                -p 5010:5010 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e HOSTNAME=activity-log-service \
                -e SPRING_SECURITY_USER_NAME=craftpilot \
                -e SPRING_SECURITY_USER_PASSWORD=13579ada \
                -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
                -e MONGODB_DATABASE=activitylog \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=70.0 -XX:+UseG1GC -Djava.security.egd=file:/dev/./urandom -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010" \
                ${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:latest-arm64
            else
              # Prod modu
              docker run -d \
                --name activity-log-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8095:8095 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e HOSTNAME=activity-log-service \
                -e SPRING_SECURITY_USER_NAME=craftpilot \
                -e SPRING_SECURITY_USER_PASSWORD=13579ada \
                -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
                -e MONGODB_DATABASE=activitylog \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=70.0 -XX:+UseG1GC -Djava.security.egd=file:/dev/./urandom" \
                ${{ secrets.DOCKERHUB_USERNAME }}/activity-log-service:latest-arm64
            fi

            # MongoDB'nin hazır olduğunu kontrol etmek yerine direkt servisi bekleyelim
            echo "Waiting for service to start..."
            for i in {1..12}; do
              if curl -s http://localhost:8095/actuator/health | grep -q "UP"; then
                echo "Service is healthy"
                exit 0
              fi
              echo "Attempt $i: Service not ready yet..."
              sleep 10
            done

            echo "Service failed to become healthy within timeout"
            docker logs activity-log-service
            exit 1
