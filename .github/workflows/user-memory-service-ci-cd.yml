name: User Memory Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "user-memory-service/**"
      - ".github/workflows/user-memory-service-ci-cd.yml"
  pull_request:
    branches: [master]
    paths:
      - "user-memory-service/**"
      - ".github/workflows/user-memory-service-ci-cd.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - debug

env:
  SERVICE_NAME: user-memory-service
  CONTAINER_PORT: 8067
  DOCKER_REGISTRY: craftpilot
  IMAGE_TAG: latest-arm64
  MANAGEMENT_PORT: 8067

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./user-memory-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./user-memory-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:buildcache-arm64,mode=max
          build-args: |
            SKIP_TESTS=true

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: "20m"
          debug: true
          script: |
            set -e  # Exit on any error

            echo "=== Testing SSH Connection ==="
            whoami
            pwd

            echo "=== System Architecture ==="
            uname -m

            echo "=== Testing Directory Access ==="
            mkdir -p /opt/craftpilot

            echo "=== Continuing with Deployment ==="
            # GCP credentials dizini oluştur
            mkdir -p /opt/craftpilot/gcp/credentials
            # GCP credentials dosyasını oluştur
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/gcp/credentials/gcp-credentials.json
            # İzinleri ayarla - herkes tarafından okunabilsin
            chmod 644 /opt/craftpilot/gcp/credentials/gcp-credentials.json

            echo "=== Verifying Docker Status ==="
            if ! systemctl is-active --quiet docker; then
              echo "Docker is not running. Starting Docker..."
              sudo systemctl start docker
            fi

            echo "=== Deploying User Memory Service ==="
            # Force pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}

            echo "=== Stopping Old Container ==="
            docker rm -f ${{ env.SERVICE_NAME }} || true

            echo "=== Starting User Memory Service ==="
            if [[ "${{ github.event.inputs.environment }}" == "debug" ]]; then
              docker run -d \
                --name ${{ env.SERVICE_NAME }} \
                --network craftpilot-network \
                --restart unless-stopped \
                -p ${{ env.CONTAINER_PORT }}:${{ env.CONTAINER_PORT }} \
                -p 5008:5008 \
                -v /opt/craftpilot/gcp/credentials/gcp-credentials.json:/etc/gcp/credentials/gcp-credentials.json:ro \
                -e GOOGLE_APPLICATION_CREDENTIALS=/etc/gcp/credentials/gcp-credentials.json \
                -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=file:/etc/gcp/credentials/gcp-credentials.json \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SERVER_PORT=${{ env.CONTAINER_PORT }} \
                -e MANAGEMENT_SERVER_PORT=${{ env.MANAGEMENT_PORT }} \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:CHANGE_ME_IN_PRODUCTION@eureka-server:8761/eureka/ \
                -e EUREKA_INSTANCE_HOSTNAME=${{ env.SERVICE_NAME }} \
                -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=CHANGE_ME_IN_PRODUCTION \
                -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE="health,info,metrics,prometheus" \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e SPRING_APPLICATION_NAME=${{ env.SERVICE_NAME }} \
                -e SPRING_CLOUD_GCP_PROJECT_ID=${SPRING_CLOUD_GCP_PROJECT_ID:-craft-pilot-ai} \
                -e LOGGING_LEVEL_COM_CRAFTPILOT=DEBUG \
                -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_NETFLIX_EUREKA=DEBUG \
                -e "JAVA_TOOL_OPTIONS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008" \
                ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
            else
              docker run -d \
                --name ${{ env.SERVICE_NAME }} \
                --network craftpilot-network \
                --restart unless-stopped \
                -p ${{ env.CONTAINER_PORT }}:${{ env.CONTAINER_PORT }} \
                -v /opt/craftpilot/gcp/credentials/gcp-credentials.json:/etc/gcp/credentials/gcp-credentials.json:ro \
                -e GOOGLE_APPLICATION_CREDENTIALS=/etc/gcp/credentials/gcp-credentials.json \
                -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=file:/etc/gcp/credentials/gcp-credentials.json \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SERVER_PORT=${{ env.CONTAINER_PORT }} \
                -e MANAGEMENT_SERVER_PORT=${{ env.MANAGEMENT_PORT }} \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:CHANGE_ME_IN_PRODUCTION@eureka-server:8761/eureka/ \
                -e EUREKA_INSTANCE_HOSTNAME=${{ env.SERVICE_NAME }} \
                -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=CHANGE_ME_IN_PRODUCTION \
                -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE="health,info,metrics,prometheus" \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e SPRING_APPLICATION_NAME=${{ env.SERVICE_NAME }} \
                -e SPRING_CLOUD_GCP_PROJECT_ID=${SPRING_CLOUD_GCP_PROJECT_ID:-craft-pilot-ai} \
                -e LOGGING_LEVEL_COM_CRAFTPILOT=INFO \
                ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
            fi

            echo "=== Waiting for Service to Start ==="
            max_attempts=20
            counter=0

            while [ $counter -lt $max_attempts ]; do
              echo "Health check attempt $((counter + 1))/$max_attempts"
              
              # Container status check
              if ! docker ps --filter "name=${{ env.SERVICE_NAME }}" --format '{{.Status}}' | grep -q "Up"; then
                echo "Container is not running anymore. Checking logs..."
                docker logs ${{ env.SERVICE_NAME }} --tail 100
                exit 1
              fi
              
              # Health check
              HEALTH_CHECK=$(curl -s http://localhost:${{ env.CONTAINER_PORT }}/actuator/health || echo "Failed to connect")
              
              if echo "$HEALTH_CHECK" | grep -q '"status":"UP"'; then
                echo "✓ Service is healthy: $HEALTH_CHECK"
                echo "=== Deployment completed successfully ==="
                exit 0
              else
                echo "Health check response: $HEALTH_CHECK"
              fi
              
              echo "Waiting for service to start... ($((counter + 1))/$max_attempts)"
              sleep 15
              counter=$((counter + 1))
            done

            echo "=== Service Failed to Start - Debug Information ==="
            echo "Docker Container Status:"
            docker ps -a | grep ${{ env.SERVICE_NAME }}
            echo "Container Logs (last 100 lines):"
            docker logs ${{ env.SERVICE_NAME }} --tail 100
            echo "Error Messages and Exceptions:"
            docker logs ${{ env.SERVICE_NAME }} 2>&1 | grep -i "error\|exception\|failed" | tail -20

            echo "=== Deployment Failed ==="
            exit 1
