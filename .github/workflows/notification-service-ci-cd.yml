name: Notification Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "notification-service/**"
      - ".github/workflows/notification-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./notification-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Build
        run: ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./notification-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/notification-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/notification-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/notification-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/notification-service:buildcache-arm64,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Infrastructure network
            docker network create craftpilot-network || true

            # Remove existing container
            docker stop notification-service || true
            docker rm notification-service || true

            # Create Firebase credentials file
            echo '${{ secrets.FIREBASE_CREDENTIALS }}' > /tmp/firebase-credentials.json

            # Run new container
            docker run -d \
              --name notification-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8065:8065 \
              -v /tmp/firebase-credentials.json:/firebase-credentials.json:ro \
              -v /opt/craftpilot/gcp-credentials.json:/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e SPRING_CLOUD_GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} \
              -e GOOGLE_APPLICATION_CREDENTIALS=/gcp-credentials.json \
              -e FIREBASE_CREDENTIALS_PATH=/firebase-credentials.json \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              ${{ secrets.DOCKERHUB_USERNAME }}/notification-service:latest-arm64

            # Health check with more detailed output
            echo "Starting health checks..."
            for i in {1..30}; do
              echo "Attempt $i: Checking service health..."
              
              HEALTH_STATUS=$(curl -s http://localhost:8065/actuator/health || echo "Failed to connect")
              echo "Health status: $HEALTH_STATUS"
              
              if echo "$HEALTH_STATUS" | grep -q "UP"; then
                echo "Service is healthy!"
                exit 0
              fi
              
              if [ $i -eq 15 ]; then
                echo "Mid-point container logs:"
                docker logs notification-service
              fi
              
              sleep 10
            done

            echo "Service failed to become healthy within timeout"
            echo "Final container logs:"
            docker logs notification-service
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
