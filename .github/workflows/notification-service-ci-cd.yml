name: Notification Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "notification-service/**"
      - "pom.xml"
      - ".github/workflows/notification-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./notification-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Build
        run: ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./notification-service # Değiştirildi
          file: ./notification-service/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/notification-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/notification-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/notification-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/notification-service:buildcache-arm64,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment process..."

            # Debug mode enabled
            set -x

            echo "Checking Docker service status..."
            systemctl status docker || true

            echo "Checking existing containers..."
            docker ps -a | grep notification-service || true

            echo "Creating network if not exists..."
            docker network create craftpilot-network || true

            echo "Pulling latest image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/notification-service:latest-arm64

            echo "Stopping and removing existing container..."
            docker stop notification-service || true
            docker rm notification-service || true

            echo "Setting up directories and permissions..."
            mkdir -p /opt/craftpilot/config/notification-service

            echo "Creating GCP credentials..."
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/config/notification-service/gcp-credentials.json
            chmod 644 /opt/craftpilot/config/notification-service/gcp-credentials.json
            chown 65532:65532 /opt/craftpilot/config/notification-service/gcp-credentials.json

            echo "Creating Firebase credentials..."
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > /opt/craftpilot/config/notification-service/firebase-service-account.json
            chmod 644 /opt/craftpilot/config/notification-service/firebase-service-account.json
            chown 65532:65532 /opt/craftpilot/config/notification-service/firebase-service-account.json

            echo "#!/bin/sh
            curl -f http://localhost:8053/actuator/health || exit 1" > /opt/craftpilot/config/notification-service/healthcheck.sh
            chmod +x /opt/craftpilot/config/notification-service/healthcheck.sh

            # Create function definition in a variable to avoid semicolon issues
            FUNCTION_DEF="notificationEventConsumer;notificationEventProducer"

            # GCP ve DNS ayarlarını güncelle
            echo "Setting up networking config..."
            cat > /opt/craftpilot/config/notification-service/grpc-netty.properties << EOF
            io.grpc.netty.negotiationType=TLS
            io.grpc.netty.keepAliveTime=60
            io.grpc.netty.keepAliveTimeout=20
            io.netty.handler.ssl.openssl.useKeyManagerFactory=true
            EOF

            echo "Starting container..."
            docker run -d \
              --name notification-service \
              --network craftpilot-network \
              --restart unless-stopped \
              --memory="1g" \
              --memory-swap="2g" \
              --memory-reservation="512m" \
              --cpus="1.0" \
              -p 8053:8053 \
              -v /opt/craftpilot/config/notification-service:/app/config:ro \
              -v "/opt/craftpilot/config/notification-service/gcp-credentials.json:/app/credentials/gcp-credentials.json:ro" \
              -v "/opt/craftpilot/config/notification-service/firebase-service-account.json:/app/credentials/firebase-credentials.json:ro" \
              -v "/opt/craftpilot/config/notification-service/grpc-netty.properties:/app/config/grpc-netty.properties:ro" \
              -v "/opt/craftpilot/config/notification-service/healthcheck.sh:/app/healthcheck.sh:ro" \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/gcp-credentials.json \
              -e FIREBASE_CONFIG=/app/credentials/firebase-credentials.json \
              -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=file:/app/credentials/gcp-credentials.json \
              -e GCP_SA_KEY='${{ secrets.GCP_SA_KEY }}' \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8053 \
              -e SPRING_CLOUD_GCP_PROJECT_ID=craft-pilot-ai \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=kafka:9092 \
              -e SPRING_CLOUD_STREAM_DEFAULT_BINDER=kafka \
              -e "SPRING_CLOUD_FUNCTION_DEFINITION=${FUNCTION_DEF}" \
              -e SPRING_CLOUD_STREAM_BINDINGS_PROCESSNOTIFICATION_IN_0_DESTINATION=notifications \
              -e SPRING_CLOUD_STREAM_BINDINGS_PROCESSNOTIFICATION_IN_0_GROUP=notification-service-group \
              -e SPRING_CLOUD_STREAM_BINDINGS_PROCESSNOTIFICATION_OUT_0_DESTINATION=notifications \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              -e SPRING_DATA_REDIS_HOST=redis \
              -e SPRING_DATA_REDIS_PORT=6379 \
              -e SPRING_DATA_REDIS_PASSWORD=13579ada \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e SPRING_MAIL_SENDGRID_FROM='${{ secrets.SENDGRID_FROM_EMAIL }}' \
              -e SPRING_MAIL_HOST=smtp.sendgrid.net \
              -e SPRING_MAIL_PORT=587 \
              -e SPRING_MAIL_USERNAME=apikey \
              -e SPRING_MAIL_PASSWORD='${{ secrets.SENDGRID_API_KEY }}' \
              -e MANAGEMENT_HEALTH_MAIL_ENABLED=false \
              -e SPRING_MAIL_ENABLED=false \
              -e SPRING_SENDGRID_API_KEY='${{ secrets.SENDGRID_API_KEY }}' \
              -e SPRING_SENDGRID_ENABLED=true \
              --dns 8.8.8.8 \
              --dns 8.8.4.4 \
              --health-cmd="/healthcheck.sh" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=5 \
              --health-start-period=180s \
              ${{ secrets.DOCKERHUB_USERNAME }}/notification-service:latest-arm64

            echo "Waiting for container to start..."
            sleep 180  # Increased wait time

            echo "Checking container status..."
            if [ "$(docker ps -q -f name=notification-service)" ]; then
              echo "Container is running successfully"
              echo "Container logs:"
              docker logs notification-service --tail 100
              
              echo "Container health status:"
              docker inspect --format='{{json .State.Health}}' notification-service
              
              echo "Testing container health:"
              if docker exec notification-service /healthcheck.sh; then
                echo "Health check passed"
              else
                echo "Health check failed"
                exit 1
              fi
              
              echo "Container network info:"
              docker inspect notification-service | grep -i ip
              
              echo "Testing container health:"
              curl -v http://localhost:8053/actuator/health || true
              
              echo "Verifying Firestore connectivity..."
              docker exec notification-service curl -v https://firestore.googleapis.com/
              
              echo "Verifying SendGrid API connectivity..."
              docker exec notification-service curl -v https://api.sendgrid.com/v3/mail/send -H "Authorization: Bearer $SENDGRID_API_KEY"
            else
              echo "Container failed to start"
              echo "Container logs:"
              docker logs notification-service
              
              echo "Docker events:"
              docker events --filter container=notification-service --since 5m || true
              
              echo "System logs:"
              journalctl -u docker.service --since "5 minutes ago" || true
              
              exit 1
            fi

            # Disable debug mode
            set +x
