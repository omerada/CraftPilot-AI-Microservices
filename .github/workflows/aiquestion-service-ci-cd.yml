name: AIQuestion Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "aiquestion-service/**"
      - ".github/workflows/aiquestion-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./aiquestion-service
    steps:
      - uses: actions/checkout@v3

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      # Docker Hub'a giriş yap
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      # Sadece ARM64 için build ve push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./aiquestion-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/aiquestion-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/aiquestion-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/aiquestion-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/aiquestion-service:buildcache-arm64,mode=max

      # Google Cloud kimlik doğrulaması
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      # Google Cloud CLI kurulumu
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          debug: true
          command_timeout: "20m"
          script: |
            echo "=== Testing Docker ==="
            docker version
            docker info
            docker ps

            # Docker ağını oluştur (eğer yoksa)
            docker network create craftpilot-network || true

            # GCP kimlik bilgilerini oluştur
            mkdir -p /opt/craftpilot
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/gcp-credentials.json
            chmod 600 /opt/craftpilot/gcp-credentials.json

            # Redis durumunu kontrol et ve gerekirse başlat
            if ! docker ps --filter "name=redis" --filter "status=running" -q | grep -q .; then
              echo "=== Starting Redis ==="
              docker run -d \
                --name redis \
                --network craftpilot-network \
                -p 6379:6379 \
                redis:latest
              
              echo "=== Waiting for Redis to start ==="
              sleep 10
            else
              echo "=== Redis is already running ==="
            fi

            # Eureka durumunu kontrol et ve gerekirse başlat
            if ! docker ps --filter "name=eureka-server" --filter "status=running" -q | grep -q .; then
              echo "=== Starting Eureka Server ==="
              docker run -d \
                --name eureka-server \
                --network craftpilot-network \
                -p 8761:8761 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e EUREKA_USERNAME=craftpilot \
                -e EUREKA_PASSWORD=13579ada \
                ${{ secrets.DOCKERHUB_USERNAME }}/eureka-server:latest-arm64
              
              echo "=== Waiting for Eureka to start ==="
              sleep 30
            else
              echo "=== Eureka Server is already running ==="
            fi

            echo "=== Pulling ARM64 Image ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/aiquestion-service:latest-arm64

            echo "=== Stopping Old Container ==="
            docker stop aiquestion-service || true
            docker rm aiquestion-service || true

            echo "=== Starting New Container ==="
            docker run -d \
              --name aiquestion-service \
              --network craftpilot-network \
              -p 8062:8062 \
              -v /opt/craftpilot/gcp-credentials.json:/gcp-credentials.json:ro \
              -e GOOGLE_APPLICATION_CREDENTIALS=/gcp-credentials.json \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_PREFERIPADDRESS=true \
              -e EUREKA_USERNAME=craftpilot \
              -e EUREKA_PASSWORD=13579ada \
              -e SPRING_REDIS_HOST=redis \
              -e SPRING_REDIS_PORT=6379 \
              -e SPRING_REDIS_PASSWORD=13579ada \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/aiquestion-service:latest-arm64

            # Servislerin başlamasını bekle
            echo "=== Waiting for Services to Start ==="
            sleep 30

            # Bağlantı kontrolleri için yardımcı fonksiyon
            check_connection() {
              local max_attempts=5
              local attempt=1
              local service=$1
              local host=$2
              local port=$3
              
              while [ $attempt -le $max_attempts ]; do
                if docker exec aiquestion-service nc -z $host $port; then
                  echo "$service connection successful"
                  return 0
                fi
                echo "Attempt $attempt: Waiting for $service connection..."
                sleep 10
                attempt=$((attempt + 1))
              done
              
              echo "$service connection failed after $max_attempts attempts"
              docker logs $host
              return 1
            }

            # Redis ve Eureka bağlantılarını kontrol et
            echo "=== Testing Service Connections ==="
            check_connection "Redis" "redis" "6379" || exit 1
            check_connection "Eureka" "eureka-server" "8761" || exit 1

            echo "=== Container Logs ==="
            docker logs aiquestion-service

            # Health check
            echo "=== Health Check ==="
            for i in {1..5}; do
              if curl -f http://localhost:8062/actuator/health; then
                echo "Service is healthy"
                exit 0
              fi
              echo "Waiting for service to start... Attempt $i"
              sleep 10
            done

            echo "Service failed health check"
            docker logs aiquestion-service
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
