name: Redis Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "redis-service/**"
      - ".github/workflows/redis-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./redis-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Build
        run: ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./redis-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/redis-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/redis-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/redis-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/redis-service:buildcache-arm64,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Redis container'ını başlat
            if ! docker ps | grep -q redis; then
              echo "Starting Redis container..."
              docker run -d \
                --name redis \
                --network craftpilot-network \
                -p 6379:6379 \
                -e REDIS_PASSWORD=13579ada \
                redis:latest redis-server --requirepass 13579ada
            fi

            # Redis'in hazır olmasını bekle
            echo "Redis'in hazır olması bekleniyor..."
            until docker exec redis redis-cli -a 13579ada ping | grep -q "PONG"; do
              sleep 2
            done

            # Redis Service'i başlat
            echo "Starting redis-service..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/redis-service:latest-arm64
            docker stop redis-service || true
            docker rm redis-service || true

            docker run -d \
              --name redis-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8061:8061 \
              -v /opt/craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
              -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=file:/app/gcp-credentials.json \
              -e SPRING_REDIS_HOST=redis \
              -e SPRING_REDIS_PORT=6379 \
              -e SPRING_REDIS_PASSWORD=13579ada \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e SPRING_KAFKA_CONSUMER_GROUP_ID=redis-service-group \
              -e SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest \
              ${{ secrets.DOCKERHUB_USERNAME }}/redis-service:latest-arm64

            # Health check
            echo "Checking service health..."
            for i in {1..30}; do
              if curl -s http://localhost:8061/actuator/health | grep -q "UP"; then
                echo "Service is healthy"
                exit 0
              fi
              echo "Waiting for service to be healthy... (attempt $i/30)"
              sleep 10
            done

            echo "Service failed to become healthy"
            docker logs redis-service
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
