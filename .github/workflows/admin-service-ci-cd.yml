name: Admin Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "admin-service/**"
      - ".github/workflows/admin-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./admin-service
    steps:
      - uses: actions/checkout@v3

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      # Docker Hub'a giriş yap
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      # Sadece ARM64 için build ve push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./admin-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-service:buildcache-arm64,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          debug: true
          command_timeout: "20m"
          script: |
            echo "=== Testing Docker ==="
            docker version
            docker info
            docker ps

            # Docker ağını oluştur (eğer yoksa)
            docker network create craftpilot-network || true

            # GCP kimlik bilgilerini oluştur
            echo "=== Setting up GCP Credentials ==="
            mkdir -p /opt/craftpilot
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/gcp-credentials.json
            chmod 600 /opt/craftpilot/gcp-credentials.json

            # Redis container'ını başlat (eğer çalışmıyorsa)
            if ! docker ps | grep -q redis; then
              docker run -d \
                --name redis \
                --network craftpilot-network \
                -p 6379:6379 \
                --restart unless-stopped \
                redis:latest redis-server \
                --requirepass 13579ada \
                --appendonly yes \
                --maxmemory 1gb \
                --maxmemory-policy allkeys-lru
            fi

            # Eureka server'ı başlat (eğer çalışmıyorsa)
            if ! docker ps | grep -q eureka-server; then
              docker run -d \
                --name eureka-server \
                --network craftpilot-network \
                -p 8761:8761 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e EUREKA_USERNAME=craftpilot \
                -e EUREKA_PASSWORD=13579ada \
                ${{ secrets.DOCKERHUB_USERNAME }}/eureka-server:latest-arm64
            fi

            echo "=== Pulling ARM64 Image ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64

            echo "=== Stopping Old Container ==="
            docker stop admin-service || true
            docker rm admin-service || true

            echo "=== Starting New Container ==="
            docker run -d \
              --name admin-service \
              --network craftpilot-network \
              -p 8063:8063 \
              -v /opt/craftpilot/gcp-credentials.json:/gcp-credentials.json:ro \
              -e GOOGLE_APPLICATION_CREDENTIALS=/gcp-credentials.json \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_PREFERIPADDRESS=true \
              -e EUREKA_USERNAME=craftpilot \
              -e EUREKA_PASSWORD=13579ada \
              -e SPRING_REDIS_HOST=redis \
              -e SPRING_REDIS_PORT=6379 \
              -e SPRING_REDIS_PASSWORD=13579ada \
              -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=/gcp-credentials.json \
              ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64

            echo "=== Waiting for Container to Start ==="
            sleep 30

            # Servis sağlık kontrolü
            echo "=== Health Check ==="
            max_attempts=5
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              if curl -s http://localhost:8063/actuator/health | grep -q '"status":"UP"'; then
                echo "Service is healthy"
                exit 0
              fi
              echo "Attempt $attempt: Waiting for service to start..."
              sleep 10
              attempt=$((attempt + 1))
            done

            echo "Service failed health check"
            docker logs admin-service
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
