name: Admin Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "admin-service/**"
      - ".github/workflows/admin-service-ci-cd.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - debug

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./admin-service
    steps:
      - uses: actions/checkout@v3

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      # Docker Hub'a giriş yap
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      # Sadece ARM64 için build ve push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./admin-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-service:buildcache-arm64,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Infrastructure containers
            docker network create craftpilot-network || true

            # GCP kimlik bilgilerini kontrol et
            if [ ! -d "/craftpilot" ]; then
              sudo mkdir -p /craftpilot
            fi

            # GCP kimlik bilgilerini oluştur ve doğrula
            echo '${{ secrets.GCP_SA_KEY }}' | sudo tee /craftpilot/gcp-credentials.json > /dev/null
            sudo chmod 640 /craftpilot/gcp-credentials.json

            # Önceki konteynerı durdur ve kaldır
            docker stop admin-service || true
            docker rm admin-service || true

            # MONGODB_URI bilgisini al
            MONGODB_URI="${{ secrets.MONGODB_URI }}"
            if [ -z "$MONGODB_URI" ]; then
              # Varsayılan URI
              MONGODB_URI="mongodb://craftpilot:secure_password@mongodb-server:27017/craftpilot?authSource=admin&retryWrites=true&w=majority&serverSelectionTimeoutMS=5000"
            fi

            echo "Starting admin-service container with environment: ${{ github.event.inputs.environment || 'prod' }}"

            # Environment tipine göre konteynerı başlat
            if [ "${{ github.event.inputs.environment }}" = "debug" ]; then
              # Debug modu için remote debugging özelliği
              docker run -d \
                --name admin-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8063:8063 \
                -p 5005:5005 \
                -v /craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SERVER_PORT=8063 \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e SPRING_DATA_MONGODB_URI=$MONGODB_URI \
                -e SPRING_DATA_MONGODB_DATABASE=craftpilot \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus \
                -e MANAGEMENT_HEALTH_MONGODB_ENABLED=true \
                -e MANAGEMENT_HEALTH_REDIS_ENABLED=true \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
                -e LOGGING_LEVEL_COM_CRAFTPILOT=DEBUG \
                -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB=DEBUG \
                -e JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n" \
                ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64
            else
              # Prod modu
              docker run -d \
                --name admin-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8063:8063 \
                -v /craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SERVER_PORT=8063 \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e SPRING_DATA_MONGODB_URI=$MONGODB_URI \
                -e SPRING_DATA_MONGODB_DATABASE=craftpilot \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus \
                -e MANAGEMENT_HEALTH_MONGODB_ENABLED=true \
                -e MANAGEMENT_HEALTH_REDIS_ENABLED=true \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
                ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64
            fi

            # Konteyner loglarını kontrol et
            echo "Container logs (after initial start):"
            sleep 5
            docker logs admin-service

            # Gelişmiş sağlık kontrolü
            echo "Performing health check..."
            max_attempts=12
            for i in $(seq 1 $max_attempts); do
              echo "Health check attempt $i/$max_attempts..."
              
              # Konteyner hala çalışıyor mu kontrol et
              if ! docker ps | grep -q admin-service; then
                echo "Container stopped unexpectedly! Checking logs..."
                docker logs admin-service
                exit 1
              fi
              
              # Sağlık kontrolü - hem localhost hem de konteyner içinden dene
              status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8063/actuator/health || echo "000")
              container_status=$(docker exec admin-service curl -s -o /dev/null -w "%{http_code}" http://localhost:8063/actuator/health 2>/dev/null || echo "000")
              
              echo "Health check response (host): $status_code"
              echo "Health check response (container): $container_status"
              
              if [ "$status_code" = "200" ] || [ "$container_status" = "200" ]; then
                echo "✅ Service is healthy! Deployment successful."
                docker logs admin-service --tail 20
                exit 0
              else
                echo "⏳ Service not ready yet, checking logs..."
                docker logs admin-service --tail 10
              fi
              
              sleep 10
            done

            echo "❌ Service failed to become healthy within timeout period."
            echo "==== CONTAINER LOGS ===="
            docker logs admin-service
            echo "==== CONTAINER INFO ===="
            docker inspect admin-service | grep -A 20 "NetworkSettings"

            # Servisin çalışmaya devam etmesine izin ver - inceleme için
            echo "⚠️ Service may not be fully functional but container remains running for debugging."
