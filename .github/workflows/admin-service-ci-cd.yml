name: Admin Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "admin-service/**"
      - ".github/workflows/admin-service-ci-cd.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - debug

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./admin-service
    steps:
      - uses: actions/checkout@v3

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      # Docker Hub'a giriş yap
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      # Sadece ARM64 için build ve push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./admin-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-service:buildcache-arm64,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Infrastructure containers
            docker network create craftpilot-network || true

            # MongoDB container check - use fixed container name from status info
            MONGODB_CONTAINER="craftpilot-mongodb"
            if ! docker ps | grep -q "$MONGODB_CONTAINER"; then
              echo "WARNING: Default MongoDB container not found ($MONGODB_CONTAINER)"
              # Still try to detect any MongoDB container as fallback
              MONGODB_CONTAINER=$(docker ps --format '{{.Names}}' | grep -E 'mongo|mongodb' | head -n 1)
              if [ -z "$MONGODB_CONTAINER" ]; then
                echo "ERROR: No MongoDB container found! Using default name, but connection may fail."
                MONGODB_CONTAINER="craftpilot-mongodb" # Fallback to default
              else
                echo "Found alternative MongoDB container: $MONGODB_CONTAINER"
              fi
            fi
            echo "Using MongoDB container: $MONGODB_CONTAINER"

            # GCP kimlik bilgilerini kontrol et
            if [ ! -d "/craftpilot" ]; then
              sudo mkdir -p /craftpilot
            fi

            # GCP kimlik bilgilerini oluştur ve doğrula
            echo '${{ secrets.GCP_SA_KEY }}' | sudo tee /craftpilot/gcp-credentials.json > /dev/null
            sudo chmod 640 /craftpilot/gcp-credentials.json

            # Önceki konteynerı durdur ve kaldır
            docker stop admin-service || true
            docker rm admin-service || true

            # MongoDB URI configuration - improved to handle container name properly
            if [ -n "${{ secrets.MONGODB_URI }}" ]; then
              # Parse the URI and replace the hostname with our container name
              # Extract parts before and after hostname
              URI_PREFIX=$(echo "${{ secrets.MONGODB_URI }}" | grep -oP 'mongodb://[^@]+@')
              URI_SUFFIX=$(echo "${{ secrets.MONGODB_URI }}" | grep -oP '(?<=@)[^/]+/.*')
              URI_HOST=$(echo "$URI_SUFFIX" | grep -oP '^[^:/]+')
              URI_REMAINDER=$(echo "$URI_SUFFIX" | grep -oP '(?<='"$URI_HOST"')[:/].*')
              
              # Build URI with the correct container name
              MONGODB_URI="${URI_PREFIX}${MONGODB_CONTAINER}${URI_REMAINDER}"
              echo "Modified MongoDB URI with correct container name: $(echo $MONGODB_URI | sed 's/:[^:]*@/:*****@/g')"
            else
              # Build URI from components
              MONGODB_URI="mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@${MONGODB_CONTAINER}:27017/craftpilot_admin_db?authSource=admin&retryWrites=true&w=majority&serverSelectionTimeoutMS=60000"
              echo "Built MongoDB URI from credential components: $(echo $MONGODB_URI | sed 's/:[^:]*@/:*****@/g')"
            fi

            # Test MongoDB connection before deployment
            echo "Testing MongoDB connection..."
            if docker run --rm --network craftpilot-network mongo:6.0 mongosh --quiet --eval "db.runCommand({ping:1}).ok" admin --host $MONGODB_CONTAINER --port 27017 -u ${{ secrets.MONGO_ROOT_USERNAME }} -p ${{ secrets.MONGO_ROOT_PASSWORD }} --authenticationDatabase admin | grep -q "1"; then
              echo "✅ MongoDB connection test successful!"
            else
              echo "⚠️ MongoDB connection test failed! Deployment will continue but may have issues."
              echo "Checking MongoDB container status:"
              docker ps | grep -i $MONGODB_CONTAINER || echo "Container not found!"
            fi

            echo "Starting admin-service container with environment: ${{ github.event.inputs.environment || 'prod' }}"

            # Environment tipine göre konteynerı başlat
            if [ "${{ github.event.inputs.environment }}" = "debug" ]; then
              # Debug modu için remote debugging özelliği
              docker run -d \
                --name admin-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8063:8063 \
                -p 5005:5005 \
                -v /craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SERVER_PORT=8063 \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:TEST123@eureka-server:8761/eureka/ \
                -e SPRING_DATA_MONGODB_URI="$MONGODB_URI" \
                -e SPRING_DATA_MONGODB_DATABASE=craftpilot \
                -e SPRING_DATA_MONGODB_CONNECT_TIMEOUT=60000 \
                -e SPRING_DATA_MONGODB_SOCKET_TIMEOUT=60000 \
                -e SPRING_DATA_MONGODB_MAX_WAIT_TIME=120000 \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=TEST123 \
                -e SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus \
                -e MANAGEMENT_HEALTH_MONGODB_ENABLED=true \
                -e MANAGEMENT_HEALTH_REDIS_ENABLED=true \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
                -e LOGGING_LEVEL_COM_CRAFTPILOT=DEBUG \
                -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB=DEBUG \
                -e JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n" \
                ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64
            else
              # Prod modu - simplified, like the credit-service
              docker run -d \
                --name admin-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8063:8063 \
                -v /craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SERVER_PORT=8063 \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:TEST123@eureka-server:8761/eureka/ \
                -e SPRING_DATA_MONGODB_URI="$MONGODB_URI" \
                -e SPRING_DATA_MONGODB_DATABASE=craftpilot \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=TEST123 \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64
            fi

            # Waiting for container to start
            echo "Waiting for container to initialize..."
            sleep 10

            # Install jq if not present for proper JSON parsing
            echo "Ensuring jq is installed for JSON parsing..."
            if ! command -v jq &> /dev/null; then
              apt-get update && apt-get install -y jq || echo "Could not install jq, will use alternatives"
            fi

            # More reliable health check approach with MongoDB connection verification
            echo "Performing health check with MongoDB connection verification..."
            for i in {1..30}; do
              if ! docker ps | grep -q "admin-service"; then
                echo "❌ Container stopped unexpectedly!"
                docker logs admin-service || echo "No logs available"
                exit 1
              fi
              
              # Try health check with better parsing
              HEALTH_CHECK=$(curl -s http://localhost:8063/actuator/health || echo "{}")
              
              # Check if overall service is UP
              if echo "$HEALTH_CHECK" | grep -q '"status":"UP"'; then
                echo "✅ Service reports overall status as UP!"
                
                # Try to parse with jq if available
                if command -v jq &> /dev/null; then
                  MONGO_STATUS=$(echo "$HEALTH_CHECK" | jq -r '.components.mongo.status' 2>/dev/null || echo "UNKNOWN")
                  if [ "$MONGO_STATUS" = "UP" ]; then
                    echo "✅ MongoDB component is healthy! (verified by jq)"
                    echo "Deployment completed successfully!"
                    docker logs admin-service --tail 20
                    exit 0
                  elif echo "$HEALTH_CHECK" | grep -q '"mongo":{.*"status":"UP"'; then
                    echo "✅ MongoDB component is healthy! (verified by grep)"
                    echo "Deployment completed successfully!"
                    docker logs admin-service --tail 20
                    exit 0
                  else
                    echo "⚠️ Service is UP but MongoDB component status is: $MONGO_STATUS"
                  fi
                else
                  # Fallback if jq is not available - just check for the string pattern
                  if echo "$HEALTH_CHECK" | grep -q '"mongo".*"status":"UP"'; then
                    echo "✅ MongoDB component appears to be healthy based on string search"
                    echo "Deployment completed successfully!"
                    docker logs admin-service --tail 20
                    exit 0
                  fi
                  
                  # Additional fallback - if overall status is UP for 3 consecutive checks, accept it
                  if [ $i -ge 10 ]; then
                    echo "✅ Service has been reporting UP status for multiple checks"
                    echo "Assuming deployment is successful despite unclear MongoDB status"
                    docker logs admin-service --tail 20
                    exit 0
                  fi
                fi
              fi
              
              echo "Health check attempt $i/30 - service not ready yet"
              
              # Enhanced MongoDB connection diagnostics
              if [ $i -eq 5 ] || [ $i -eq 15 ] || [ $i -eq 25 ]; then
                echo "--- MongoDB Connection Diagnostics ---"
                echo "MongoDB container status:"
                docker ps | grep $MONGODB_CONTAINER || echo "MongoDB container not running!"
                
                echo "Testing network connectivity from admin-service to MongoDB:"
                docker exec admin-service nc -zv $MONGODB_CONTAINER 27017 || echo "Cannot connect to MongoDB"
                
                echo "Container environment variables:"
                docker exec admin-service env | grep -E 'MONGO|DB_|mongodb' || echo "No MongoDB env vars found"
                
                echo "Network details:"
                docker network inspect craftpilot-network | grep -A 5 -E "$MONGODB_CONTAINER|admin-service" || echo "Network inspection failed"
              fi
              
              sleep 10
            done

            echo "❌ Service failed to become healthy within timeout period."
            echo "Final container logs:"
            docker logs admin-service --tail 50
            echo "Container is still running for debugging purposes."
