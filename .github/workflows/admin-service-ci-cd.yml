name: Admin Service CI/CD

on:
  push:
    paths:
      - "admin-service/**"
      - ".github/workflows/admin-service-ci-cd.yml"
    branches: [master]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "corretto"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create GCP Credentials Directory
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            mkdir -p /opt/craftpilot
            echo '${{ secrets.GCP_CREDENTIALS }}' > /opt/craftpilot/gcp-credentials.json
            chmod 600 /opt/craftpilot/gcp-credentials.json
          EOF

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          cd admin-service
          docker buildx create --use
          docker buildx build --platform linux/arm64 -t $DOCKER_USERNAME/admin-service:latest-arm64 --push .

      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            # Docker container'ı güncelle
            docker pull ${{ secrets.DOCKER_USERNAME }}/admin-service:latest-arm64
            docker stop admin-service || true
            docker rm admin-service || true
            docker run -d \
              --name admin-service \
              --network craftpilot-network \
              -p 8063:8063 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} \
              -v /opt/craftpilot/gcp-credentials.json:/opt/craftpilot/gcp-credentials.json:ro \
              ${{ secrets.DOCKER_USERNAME }}/admin-service:latest-arm64
            
            echo '=== Waiting for Container to Start ==='
            sleep 30
            
            echo '=== Container Logs ==='
            docker logs admin-service
            
            echo '=== Health Check ==='
            HEALTH_CHECK=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8063/actuator/health)
            if [ "$HEALTH_CHECK" = "200" ]; then
              echo 'Service is healthy'
            else
              echo 'Service failed health check'
              docker stop admin-service
              docker rm admin-service
              exit 1
            fi
          EOF
