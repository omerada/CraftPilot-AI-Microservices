name: Admin Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "admin-service/**"
      - "shared-config/**"
      - ".github/workflows/admin-service-ci-cd.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Cleanup workspace
        run: |
          rm -rf ./* ./.* || true

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      # Create Maven volume once
      - name: Setup Maven volume
        run: |
          docker volume create maven-repo || true
          docker run --rm \
            -v maven-repo:/maven-repo \
            alpine:latest \
            chmod -R 777 /maven-repo

      # Build both projects in one container
      - name: Build projects
        run: |
          echo "Building shared-config and admin-service..."
          docker run --rm \
            -v "${PWD}:/workspace" \
            -v maven-repo:/root/.m2 \
            -w /workspace \
            maven:3.9.6-eclipse-temurin-21-alpine \
            /bin/sh -c '
              cd shared-config && mvn clean install -DskipTests && \
              cd ../admin-service && mvn clean package -DskipTests
            '

      - name: Set up Docker Build
        run: |
          docker buildx create --use --platform linux/arm64
          docker buildx inspect --bootstrap

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./admin-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/admin-service:buildcache-arm64,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Infrastructure containers
            docker network create craftpilot-network || true

            # Create and validate GCP credentials
            sudo mkdir -p /opt/craftpilot
            echo '${{ secrets.GCP_SA_KEY }}' | sudo tee /opt/craftpilot/gcp-credentials.json > /dev/null
            sudo chmod 640 /opt/craftpilot/gcp-credentials.json

            # Validate JSON format
            if ! jq empty /opt/craftpilot/gcp-credentials.json 2>/dev/null; then
              echo "Invalid GCP credentials JSON format!"
              exit 1
            fi

            # Check file content
            if [ ! -s /opt/craftpilot/gcp-credentials.json ]; then
              echo "GCP credentials file is empty!"
              exit 1
            fi

            # Container management
            docker stop admin-service || true
            docker rm admin-service || true

            # Run new container
            docker run -d \
              --name admin-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8063:8063 \
              -v /opt/craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8063 \
              -e EUREKA_INSTANCE_NONSECUREPORT=8063 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_PREFERIPADDRESS=true \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              -e SPRING_CLOUD_GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
              -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=file:/app/gcp-credentials.json \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e LOGGING_LEVEL_COM_CRAFTPILOT=DEBUG \
              ${{ secrets.DOCKERHUB_USERNAME }}/admin-service:latest-arm64

            # Health check
            echo "Performing health check..."
            for i in {1..12}; do
              if curl -sf http://localhost:8063/actuator/health; then
                echo "Service started successfully!"
                exit 0
              fi
              echo "Attempt $i: Service starting..."
              sleep 10
            done

            echo "Service failed to start - Latest container logs:"
            docker logs admin-service
            exit 1
