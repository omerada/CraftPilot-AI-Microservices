name: Kafka Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "kafka-service/**"
      - ".github/workflows/kafka-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./kafka-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./kafka-service
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kafka-service:latest-arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Infrastructure containers
            docker network create craftpilot-network || true

            # Start Zookeeper if not running
            if ! docker ps | grep -q zookeeper; then
              docker run -d \
                --name zookeeper \
                --network craftpilot-network \
                -e ZOOKEEPER_CLIENT_PORT=2181 \
                -e ZOOKEEPER_TICK_TIME=2000 \
                confluentinc/cp-zookeeper:latest
            fi

            # Wait for Zookeeper to be ready
            echo "Waiting for Zookeeper to be ready..."
            sleep 20

            # Remove existing container
            docker stop kafka-service || true
            docker rm kafka-service || true

            # Run new container
            docker run -d \
              --name kafka-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 9093:9093 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,INTERNAL://localhost:29092 \
              -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT \
              -e KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT \
              -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
              -e KAFKA_AUTO_CREATE_TOPICS_ENABLE=true \
              -e KAFKA_NUM_PARTITIONS=3 \
              ${{ secrets.DOCKERHUB_USERNAME }}/kafka-service:latest-arm64

            # Increase initial wait time
            echo "Waiting for service to start..."
            sleep 60

            # Health check
            for i in {1..30}; do
              if curl -s http://localhost:9093/actuator/health | grep -q "UP"; then
                echo "Service is healthy"
                exit 0
              fi
              echo "Attempt $i: Service not ready yet..."
              if [ $i -eq 15 ]; then
                echo "Mid-point container logs:"
                docker logs kafka-service
              fi
              sleep 10
            done

            echo "Service failed to become healthy within timeout"
            echo "Final container logs:"
            docker logs kafka-service
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
