name: LLM Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "llm-service/**"
      - "craft-pilot-commons/**"
      - ".github/workflows/llm-service-ci-cd.yml"
  pull_request:
    branches: [master]
    paths:
      - "llm-service/**"
      - "craft-pilot-commons/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - debug

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for Maven wrapper
        run: |
          cd llm-service
          if [ -f "mvnw" ]; then chmod +x mvnw; fi
          cd ../craft-pilot-commons
          if [ -f "mvnw" ]; then chmod +x mvnw; fi

      - name: Build commons library and llm-service
        run: |
          cd craft-pilot-commons
          mvn clean install -DskipTests
          cd ../llm-service
          mvn clean package -DskipTests
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare build context
        run: |
          # Create a temporary directory for build context
          mkdir -p /tmp/docker-build-context

          # Check source directories and files
          echo "Current directory: $(pwd)"
          echo "Checking llm-service directory:"
          ls -la llm-service/

          # Ensure llm-service and craft-pilot-commons directories exist
          if [ ! -d "llm-service" ]; then
            echo "ERROR: llm-service directory not found"
            exit 1
          fi

          if [ ! -d "craft-pilot-commons" ]; then
            echo "ERROR: craft-pilot-commons directory not found"
            exit 1
          fi

          # Copy both directories to build context
          cp -r llm-service /tmp/docker-build-context/
          cp -r craft-pilot-commons /tmp/docker-build-context/

          # Verify build context contents
          echo "Checking build context:"
          ls -la /tmp/docker-build-context/
          echo "Checking llm-service directory in build context:"
          ls -la /tmp/docker-build-context/llm-service/

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: /tmp/docker-build-context
          file: llm-service/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/llm-service:latest-arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /opt/craftpilot/tmp/netty

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/llm-service:latest-arm64
            docker stop llm-service || true
            docker rm llm-service || true

            # MongoDB konteyner adını sabit olarak craftpilot-mongodb olarak belirle
            MONGODB_CONTAINER="craftpilot-mongodb"

            # MongoDB URI konfigürasyonu - Doğrudan secrets'tan URI kullan veya bileşenlerden oluştur
            if [ -n "${{ secrets.MONGODB_URI }}" ]; then
              # URI içindeki host adını craftpilot-mongodb olarak değiştir
              MONGODB_URI=$(echo "${{ secrets.MONGODB_URI }}" | sed 's/mongodb:27017/craftpilot-mongodb:27017/g' | sed 's/@mongodb:/@craftpilot-mongodb:/g')
              echo "Secrets'tan alınan MongoDB URI düzeltildi"
            else
              # Bileşenlerden URI oluşturma - craftpilot-mongodb host adıyla
              MONGODB_URI="mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@$MONGODB_CONTAINER:27017/${{ secrets.MONGO_INITDB_DATABASE || 'llm-service' }}?authSource=admin&retryWrites=true&w=majority&serverSelectionTimeoutMS=30000&connectTimeoutMS=20000&socketTimeoutMS=60000"
              echo "Bileşenlerden MongoDB URI oluşturuldu"
            fi
            # Log çıktılarında parolayı maskele
            echo "MongoDB URI (maskelenmiş): $(echo $MONGODB_URI | sed 's/:[^:]*@/:\*\*\*@/g')"

            # MongoDB bağlantısını test et
            echo "MongoDB bağlantısı test ediliyor..."
            if docker run --rm --network craftpilot-network mongo:6.0 mongosh --quiet --eval "db.runCommand({ping:1}).ok" admin --host $MONGODB_CONTAINER --port 27017 -u ${{ secrets.MONGO_ROOT_USERNAME }} -p ${{ secrets.MONGO_ROOT_PASSWORD }} --authenticationDatabase admin | grep -q "1"; then
              echo "✅ MongoDB bağlantı testi başarılı!"
            else
              echo "⚠️ MongoDB bağlantı testi başarısız! Deployment devam edecek ancak servis başlangıçta hata verebilir."
              echo "MongoDB container'ının durumunu kontrol edin:"
              docker ps | grep -i mongo
              docker logs $MONGODB_CONTAINER --tail 20
            fi

            if [[ "${{ github.event.inputs.environment }}" == "debug" ]]; then
              docker run -d \
                --name llm-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8062:8062 \
                -p 5005:5005 \
                -v /opt/craftpilot/gcp-credentials.json:/gcp-credentials.json:ro \
                -v /opt/craftpilot/tmp/netty:/tmp/netty \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}" \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e GOOGLE_APPLICATION_CREDENTIALS=/gcp-credentials.json \
                -e SPRING_SECURITY_USER_NAME=craftpilot \
                -e SPRING_SECURITY_USER_PASSWORD=13579ada \
                -e SPRING_REDIS_HOST=redis \
                -e SPRING_REDIS_PORT=6379 \
                -e SPRING_REDIS_PASSWORD=13579ada \
                -e SPRING_DATA_MONGODB_URI="${MONGODB_URI}" \
                -e SPRING_DATA_MONGODB_DATABASE="${{ secrets.MONGO_INITDB_DATABASE || 'llm-service' }}" \
                -e MONGODB_HOST="${MONGODB_CONTAINER}" \
                -e MONGO_ROOT_USERNAME="${{ secrets.MONGO_ROOT_USERNAME }}" \
                -e MONGO_ROOT_PASSWORD="${{ secrets.MONGO_ROOT_PASSWORD }}" \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e "MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*" \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_MONGODB_ENABLED=true \
                -e MANAGEMENT_METRICS_ENABLE_MONGODB=true \
                -e MANAGEMENT_METRICS_DISTRIBUTION_PERCENTILES_HISTOGRAM_HTTP_SERVER_REQUESTS=true \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE="health,info,metrics,prometheus" \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true \
                -e LOGGING_LEVEL_COM_CRAFTPILOT=DEBUG \
                -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB=INFO \
                -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB_CORE_MONGOTEMPLATE=DEBUG \
                -e "JAVA_TOOL_OPTIONS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Dio.netty.noNative=true -Dio.netty.tryReflectionSetAccessible=true -Dnetty.native.workdir=/tmp/netty -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005" \
                --ulimit nofile=65536:65536 \
                --cap-drop ALL \
                --security-opt no-new-privileges \
                --health-cmd="curl -f http://localhost:8062/actuator/health/liveness || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                --health-start-period=120s \
                ${{ secrets.DOCKERHUB_USERNAME }}/llm-service:latest-arm64
            else
              docker run -d \
                --name llm-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8062:8062 \
                -v /opt/craftpilot/gcp-credentials.json:/gcp-credentials.json:ro \
                -v /opt/craftpilot/tmp/netty:/tmp/netty \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}" \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e GOOGLE_APPLICATION_CREDENTIALS=/gcp-credentials.json \
                -e SPRING_SECURITY_USER_NAME=craftpilot \
                -e SPRING_SECURITY_USER_PASSWORD=13579ada \
                -e SPRING_REDIS_HOST=redis \
                -e SPRING_REDIS_PORT=6379 \
                -e SPRING_REDIS_PASSWORD=13579ada \
                -e SPRING_DATA_MONGODB_URI="${MONGODB_URI}" \
                -e SPRING_DATA_MONGODB_DATABASE="${{ secrets.MONGO_INITDB_DATABASE || 'llm-service' }}" \
                -e MONGODB_HOST="${MONGODB_CONTAINER}" \
                -e MONGO_ROOT_USERNAME="${{ secrets.MONGO_ROOT_USERNAME }}" \
                -e MONGO_ROOT_PASSWORD="${{ secrets.MONGO_ROOT_PASSWORD }}" \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e "MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*" \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_MONGODB_ENABLED=true \
                -e MANAGEMENT_METRICS_ENABLE_MONGODB=true \
                -e MANAGEMENT_METRICS_DISTRIBUTION_PERCENTILES_HISTOGRAM_HTTP_SERVER_REQUESTS=true \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE="health,info,metrics,prometheus" \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true \
                -e LOGGING_LEVEL_COM_CRAFTPILOT=DEBUG \
                -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB=INFO \
                -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB_CORE_MONGOTEMPLATE=DEBUG \
                -e "JAVA_TOOL_OPTIONS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Dio.netty.noNative=true -Dio.netty.tryReflectionSetAccessible=true -Dnetty.native.workdir=/tmp/netty" \
                --ulimit nofile=65536:65536 \
                --cap-drop ALL \
                --security-opt no-new-privileges \
                --health-cmd="curl -f http://localhost:8062/actuator/health/liveness || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                --health-start-period=120s \
                ${{ secrets.DOCKERHUB_USERNAME }}/llm-service:latest-arm64
            fi

            # Geliştirilmiş sağlık kontrolü
            echo "=== Waiting for service startup ==="
            max_attempts=30
            counter=0

            while [ $counter -lt $max_attempts ]; do
              echo "Health check attempt $((counter + 1))/$max_attempts"
              
              # Container durumu kontrolü
              if ! docker ps --filter "name=llm-service" --format '{{.Status}}' | grep -q "Up"; then
                echo "Container is not running anymore. Checking logs..."
                docker logs llm-service
                exit 1
              fi
              
              # MongoDB bağlantısını kontrol et
              if [ $counter -eq 5 ] || [ $counter -eq 15 ]; then
                echo "Checking MongoDB connection from container..."
                docker exec llm-service nc -zv $MONGODB_CONTAINER 27017 || echo "Cannot connect to MongoDB from container"
                
                echo "MongoDB component health check:"
                docker exec llm-service curl -s http://localhost:8062/actuator/health/mongo || echo "MongoDB health component unavailable"
              fi
              
              # Health check
              HEALTH_CHECK=$(curl -s http://localhost:8062/actuator/health || echo '{"status":"UNKNOWN"}')
              
              if echo "$HEALTH_CHECK" | grep -q '"status":"UP"'; then
                echo "✓ Service is healthy"
                
                # MongoDB specific health check
                if echo "$HEALTH_CHECK" | grep -q '"mongo":{"status":"UP"' || docker exec llm-service curl -s http://localhost:8062/actuator/health/mongo | grep -q '"status":"UP"'; then
                  echo "✓ MongoDB connection verified"
                  echo "=== Deployment completed successfully ==="
                  exit 0
                else
                  echo "Service is up but MongoDB status unclear. Will check again..."
                  
                  # After several attempts, accept service as healthy even without clear MongoDB status
                  if [ $counter -gt 20 ]; then
                    echo "Service reporting UP status consistently. Accepting deployment."
                    echo "=== Deployment completed with warnings ==="
                    exit 0
                  fi
                fi
              fi
              
              echo "Waiting for service to start... ($((counter + 1))/$max_attempts)"
              sleep 10
              counter=$((counter + 1))
            done

            echo "=== Health check failed - Debug Information ==="
            echo "Docker Status:"
            docker ps -a | grep llm-service
            echo "Container Logs:"
            docker logs llm-service --tail 100
            echo "Health Check Response:"
            curl -v http://localhost:8062/actuator/health || true
            echo "MongoDB Connection Test:"
            docker exec llm-service nc -zv $MONGODB_CONTAINER 27017 || echo "MongoDB connection failed"
            exit 1
