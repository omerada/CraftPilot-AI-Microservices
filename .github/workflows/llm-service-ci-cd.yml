name: LLM Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "llm-service/**"
      - ".github/workflows/llm-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./llm-service
    steps:
      - uses: actions/checkout@v3

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64
          buildkitd-flags: --debug

      # Docker Hub'a giriş yap
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build ve Push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./llm-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/llm-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/llm-service:${{ github.sha }}-arm64
          no-cache: true
          pull: true

      # Kafka'nın çalışıp çalışmadığını kontrol et
      - name: Check Kafka Status
        run: |
          # Docker network'ünü oluştur
          docker network create craftpilot-network || true

          if ! docker ps | grep -q kafka; then
            echo "Kafka container is not running. Starting Kafka..."
            
            # Zookeeper'ı başlat
            docker run -d \
              --name zookeeper \
              --network craftpilot-network \
              -e ZOOKEEPER_CLIENT_PORT=2181 \
              -e ZOOKEEPER_TICK_TIME=2000 \
              confluentinc/cp-zookeeper:latest

            sleep 10

            # Kafka'yı başlat
            docker run -d \
              --name kafka \
              --network craftpilot-network \
              --hostname kafka \
              -p 9092:9092 \
              -e KAFKA_BROKER_ID=1 \
              -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \
              -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 \
              -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT \
              -e KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT \
              -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
              -e KAFKA_AUTO_CREATE_TOPICS_ENABLE="true" \
              confluentinc/cp-kafka:latest

            sleep 20
          fi

      # VPS'e deploy
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "=== Creating GCP Credentials ==="
            echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-credentials.json

            echo "=== Pulling ARM64 Image ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/llm-service:latest-arm64

            echo "=== Stopping Old Container ==="
            docker stop llm-service || true
            docker rm llm-service || true

            echo "=== Starting New Container ==="
            docker run -d \
              --name llm-service \
              --platform linux/arm64 \
              --network craftpilot-network \
              --dns 8.8.8.8 \
              --dns 8.8.4.4 \
              --add-host=kafka:$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kafka) \
              -p 8062:8062 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8057/eureka/ \
              -e GCP_SA_KEY='${{ secrets.GCP_SA_KEY }}' \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e SPRING_REDIS_HOST=redis \
              -e SPRING_REDIS_PORT=6379 \
              -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
              ${{ secrets.DOCKERHUB_USERNAME }}/llm-service:latest-arm64

            echo "=== Waiting for Container to Start ==="
            sleep 45  # Daha uzun bir bekleme süresi

            echo "=== Health Check ==="
            for i in {1..10}; do
              if curl -f http://localhost:8062/actuator/health/liveness || curl -f http://localhost:8062/actuator/health; then
                echo "Service is healthy"
                exit 0
              fi
              echo "Attempt $i: Waiting for service to start..."
              sleep 15
            done
            echo "Service failed health check"
            docker logs llm-service
            docker exec llm-service ping -c 1 kafka
            docker exec llm-service nc -zv kafka 9092
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
