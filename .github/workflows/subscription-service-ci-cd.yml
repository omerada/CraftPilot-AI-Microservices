name: Subscription Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "subscription-service/**"
      - ".github/workflows/subscription-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./subscription-service
    steps:
      - uses: actions/checkout@v3

      # JDK kurulumu
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      # Maven bağımlılıklarını önbelleğe alma
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      # Docker Hub'a giriş
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build ve Push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./subscription-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/subscription-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/subscription-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/subscription-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/subscription-service:buildcache-arm64,mode=max
          build-args: |
            BUILDPLATFORM=linux/arm64
            TARGETPLATFORM=linux/arm64

      # Google Cloud kimlik doğrulaması
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      # Google Cloud CLI kurulumu
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      # VPS'e deployment
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          debug: true
          command_timeout: "20m"
          script: |
            echo "=== Testing SSH Connection ==="
            whoami
            pwd

            echo "=== System Architecture ==="
            uname -m

            echo "=== Testing Directory Access ==="
            ls -la /opt/craftpilot || mkdir -p /opt/craftpilot

            echo "=== Continuing with Deployment ==="
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/gcp-credentials.json

            echo "=== Testing Docker ==="
            docker version
            docker info
            docker ps

            # Docker ağını oluştur (eğer yoksa)
            docker network create craftpilot-network || true

            echo "=== Pulling ARM64 Image ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/subscription-service:latest-arm64

            echo "=== Stopping Old Container ==="
            docker stop subscription-service || true
            docker rm subscription-service || true

            echo "=== Setting up GCP Credentials ==="
            mkdir -p /opt/craftpilot/gcp-credentials
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/gcp-credentials/credentials.json
            chmod 600 /opt/craftpilot/gcp-credentials/credentials.json

            echo "=== Starting New Container ==="
            docker run -d \
              --name subscription-service \
              --network craftpilot-network \
              --restart unless-stopped \
              --memory="1g" \
              --memory-reservation="512m" \
              --cpus="0.5" \
              -p 8052:8052 \
              -v /opt/craftpilot/gcp-credentials:/gcp-credentials:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_CLOUD_GCP_PROJECT_ID=craftpilot-ai \
              -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=file:/gcp-credentials/credentials.json \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_HOSTNAME=subscription-service \
              -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=true \
              -e EUREKA_CLIENT_REGISTER_WITH_EUREKA=true \
              -e EUREKA_CLIENT_FETCH_REGISTRY=true \
              -e EUREKA_USERNAME=craftpilot \
              -e EUREKA_PASSWORD=13579ada \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              ${{ secrets.DOCKERHUB_USERNAME }}/subscription-service:latest-arm64

            echo "=== Waiting for Container to Start ==="
            sleep 60

            echo "=== Container Logs ==="
            docker logs subscription-service

            echo "=== Health Check ==="
            for i in {1..10}; do
              if curl -f http://localhost:8052/actuator/health; then
                echo "Service is healthy"
                exit 0
              fi
              echo "Attempt $i: Service not healthy yet, waiting..."
              sleep 30
            done
            echo "Service failed health check"
            docker logs subscription-service
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
