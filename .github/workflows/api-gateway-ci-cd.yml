name: API Gateway CI/CD

on:
  push:
    branches: [master]
    paths:
      - "api-gateway/**"
      - ".github/workflows/api-gateway-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: |
          cd api-gateway
          chmod +x mvnw

      - name: Build
        run: |
          cd api-gateway
          ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api-gateway
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Infrastructure setup
            echo "=== Setting up infrastructure ==="
            docker network create craftpilot-network || true

            # Start Redis if not running
            if ! docker ps | grep -q redis; then
              docker run -d \
                --name redis \
                --network craftpilot-network \
                -p 6379:6379 \
                -e REDIS_PASSWORD=13579ada \
                redis:latest --requirepass 13579ada
            fi

            # Deploy API Gateway
            echo "=== Deploying API Gateway ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64
            docker stop api-gateway || true
            docker rm api-gateway || true

            docker run -d \
              --name api-gateway \
              --hostname api-gateway \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8080:8080 \
              -v /opt/craftpilot/gcp-credentials.json:/app/config/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8080 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_HOSTNAME=api-gateway \
              -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
              -e SPRING_CLOUD_CONFIG_ENABLED=false \
              -e SPRING_CLOUD_DISCOVERY_ENABLED=true \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e SPRING_APPLICATION_NAME=api-gateway \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64

            # Multi-stage health check
            echo "=== Starting health checks ==="
            max_attempts=12
            counter=0
            success=false

            while [ $counter -lt $max_attempts ] && [ "$success" = false ]; do
              counter=$((counter + 1))
              echo "Health check attempt $counter/$max_attempts"

              # Check if container is running
              if ! docker ps | grep -q api-gateway; then
                echo "Container is not running"
                docker logs api-gateway
                sleep 10
                continue
              fi

              # Check application logs
              if docker logs api-gateway 2>&1 | grep -q "Started ApiGatewayApplication"; then
                echo "Application startup logs found"
                
                # Try health endpoint
                if curl -sf -m 5 http://localhost:8080/actuator/health; then
                  echo "Health endpoint responded successfully"
                  success=true
                  break
                fi

                # Try Eureka registration
                if curl -sf -m 5 -u craftpilot:13579ada http://localhost:8761/eureka/apps/API-GATEWAY; then
                  echo "Successfully registered with Eureka"
                  success=true
                  break
                fi
              fi

              echo "Waiting 10 seconds before next attempt..."
              sleep 10
            done

            if [ "$success" = true ]; then
              echo "=== API Gateway is healthy and running ==="
              exit 0
            else
              echo "=== API Gateway health check failed ==="
              docker logs api-gateway
              exit 1
            fi

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
