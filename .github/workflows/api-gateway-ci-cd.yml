name: API Gateway CI/CD

on:
  push:
    branches: [master]
    paths:
      - "api-gateway/**"
      - ".github/workflows/api-gateway-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api-gateway
    steps:
      - uses: actions/checkout@v3

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      # Docker Hub'a giriş yap
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      # Sadece ARM64 için build ve push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api-gateway
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:buildcache-arm64,mode=max

      # Google Cloud kimlik doğrulaması
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      # Google Cloud CLI kurulumu
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          debug: true
          command_timeout: "20m"
          script: |
            echo "=== Testing SSH Connection ==="
            whoami
            pwd

            echo "=== System Architecture ==="
            uname -m

            echo "=== Testing Directory Access ==="
            ls -la /opt/craftpilot || mkdir -p /opt/craftpilot

            echo "=== Continuing with Deployment ==="
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/gcp-credentials.json

            echo "=== Testing Docker ==="
            docker version
            docker info
            docker ps

            # Docker ağını oluştur (eğer yoksa)
            docker network create craftpilot-network || true

            # Redis container'ını başlat (eğer çalışmıyorsa)
            if ! docker ps | grep -q redis; then
              docker run -d \
                --name redis \
                --network craftpilot-network \
                -p 6379:6379 \
                redis:latest
            fi

            # Eureka server'ı başlat (eğer çalışmıyorsa)
            if ! docker ps | grep -q eureka-server; then
              docker run -d \
                --name eureka-server \
                --network craftpilot-network \
                -p 8761:8761 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e EUREKA_USERNAME=craftpilot \
                -e EUREKA_PASSWORD=13579ada \
                ${{ secrets.DOCKERHUB_USERNAME }}/eureka-server:latest-arm64
            fi

            echo "=== Pulling ARM64 Image ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64

            echo "=== Stopping Old Container ==="
            docker stop api-gateway || true
            docker rm api-gateway || true

            echo "=== Starting New Container ==="
            docker run -d \
              --name api-gateway \
              --network craftpilot-network \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8080 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e SPRING_REDIS_HOST=redis \
              -e SPRING_REDIS_PORT=6379 \
              -e SPRING_REDIS_PASSWORD=13579ada \
              -e SPRING_CLOUD_GATEWAY_ROUTES_0_ID=user-service \
              -e SPRING_CLOUD_GATEWAY_ROUTES_0_URI=lb://user-service \
              -e SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0=Path=/api/v1/users/** \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info \
              ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64

            echo "=== Waiting for API Gateway ==="
            for i in {1..30}; do
              echo "Health check attempt $i/30..."
              
              # Check container logs for startup completion
              if docker logs api-gateway | grep -q "Started ApiGatewayApplication in"; then
                echo "Application startup completed"
                
                # Verify health endpoint
                if curl -sf http://localhost:8080/actuator/health; then
                  echo "API Gateway is healthy"
                  exit 0
                fi
              fi
              
              # Show recent logs
              echo "Recent logs:"
              docker logs --tail 20 api-gateway
              
              sleep 10
            done

            echo "API Gateway failed health check"
            docker logs api-gateway
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
