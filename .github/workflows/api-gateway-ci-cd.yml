name: API Gateway CI/CD

on:
  push:
    branches: [master]
    paths:
      - "api-gateway/**"
      - ".github/workflows/api-gateway-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: |
          cd api-gateway
          chmod +x mvnw

      - name: Build
        run: |
          cd api-gateway
          ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api-gateway
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "=== Setting up network ==="
            # Remove existing containers and network safely
            containers_to_remove=(redis api-gateway)
            for container in "${containers_to_remove[@]}"; do
              if docker ps -a | grep -q $container; then
                echo "Stopping and removing $container"
                docker stop $container || true
                docker rm $container || true
              fi
            done

            # Remove all disconnected networks
            docker network prune -f

            # Remove existing network if exists
            if docker network ls | grep -q craftpilot-network; then
              docker network rm craftpilot-network || true
              sleep 5
            fi

            # Create new network with retries
            max_attempts=3
            attempt=1
            network_created=false

            while [ $attempt -le $max_attempts ] && [ "$network_created" = false ]; do
              echo "Creating network attempt $attempt/$max_attempts"
              if docker network create \
                --driver bridge \
                --subnet 172.18.0.0/16 \
                --gateway 172.18.0.1 \
                craftpilot-network; then
                network_created=true
                echo "Network created successfully"
              else
                attempt=$((attempt + 1))
                sleep 5
              fi
            done

            if [ "$network_created" = false ]; then
              echo "Failed to create network after $max_attempts attempts"
              exit 1
            fi

            echo "=== Starting Redis ==="
            if ! docker run -d \
              --name redis \
              --network craftpilot-network \
              --ip 172.18.0.2 \
              -p 6379:6379 \
              -e REDIS_PASSWORD=13579ada \
              redis:latest --requirepass 13579ada; then
              echo "Failed to start Redis"
              exit 1
            fi

            echo "=== Deploying API Gateway ==="
            # Pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64

            # Clean up any existing container
            docker stop api-gateway 2>/dev/null || true
            docker rm api-gateway 2>/dev/null || true
            sleep 5

            # Start API Gateway
            if ! docker run -d \
              --name api-gateway \
              --hostname api-gateway \
              --network craftpilot-network \
              --ip 172.18.0.14 \
              --restart unless-stopped \
              -p 8080:8080 \
              -v /opt/craftpilot/gcp-credentials.json:/app/config/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8080 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_HOSTNAME=api-gateway \
              -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
              -e SPRING_CLOUD_CONFIG_ENABLED=false \
              -e SPRING_SECURITY_BASIC_ENABLED=false \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e SPRING_APPLICATION_NAME=api-gateway \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64; then
              echo "Failed to start API Gateway"
              exit 1
            fi

            echo "=== Waiting for services to initialize ==="
            sleep 30

            # Verify network connectivity
            echo "=== Verifying network connectivity ==="
            if ! docker network inspect craftpilot-network >/dev/null 2>&1; then
              echo "Network verification failed"
              exit 1
            fi

            echo "=== Waiting for initial startup ==="
            sleep 20

            echo "=== Performing health checks ==="
            # Container check
            if ! docker ps -q -f name=api-gateway; then
              echo "Container not running"
              docker logs api-gateway
              exit 1
            fi

            # Application startup check
            if ! docker logs api-gateway 2>&1 | grep -q "Started ApiGatewayApplication"; then
              echo "Application failed to start"
              docker logs api-gateway
              exit 1
            fi
            echo "✓ Application startup confirmed"

            # Port listening check
            if ! docker logs api-gateway 2>&1 | grep -q "Netty started on port 8080"; then
              echo "Server port not listening"
              docker logs api-gateway
              exit 1
            fi
            echo "✓ Server port confirmed listening"

            # Final health check
            HEALTH_RESPONSE=$(curl -s http://localhost:8080/actuator/health)
            if [ $? -eq 0 ] && echo "$HEALTH_RESPONSE" | grep -q "UP"; then
              echo "✓ Health check passed - Service is UP"
              echo "=== API Gateway successfully deployed ==="
              exit 0
            else
              echo "Health check failed"
              echo "Health Response:"
              echo "$HEALTH_RESPONSE"
              docker logs api-gateway
              exit 1
            fi

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
