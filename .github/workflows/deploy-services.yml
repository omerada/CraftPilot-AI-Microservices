name: Deploy Services

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - "docker-compose.yml"
      - "deploy.sh"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Docker setup
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker compose içeriğini base64'e çevir
      - name: Encode docker-compose
        run: |
          DOCKER_COMPOSE_CONTENT=$(cat docker-compose.yml | base64 -w 0)
          echo "DOCKER_COMPOSE_CONTENT=$DOCKER_COMPOSE_CONTENT" >> $GITHUB_ENV

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          EUREKA_USERNAME: craftpilot
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GMAIL_SERVICE_ACCOUNT: ${{ secrets.GMAIL_SERVICE_ACCOUNT }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,EUREKA_USERNAME,EUREKA_PASSWORD,GCP_SA_KEY,GCP_PROJECT_ID,REDIS_PASSWORD,GMAIL_SERVICE_ACCOUNT,GRAFANA_ADMIN_PASSWORD,DOCKER_COMPOSE_CONTENT
          script: |
            cd /opt/craftpilot

            # Ensure docker is running
            if ! systemctl is-active --quiet docker; then
              echo "Docker is not running"
              sudo systemctl start docker
              sleep 10
            fi

            # Clean old files
            rm -f docker-compose.yml start-services.sh .env

            # Setup new files
            echo "$DOCKER_COMPOSE_CONTENT" | base64 -d > docker-compose.yml

            # Copy start-services script
            cat << 'EOF' > start-services.sh
            $(cat $GITHUB_WORKSPACE/start-services.sh)
            EOF
            chmod +x start-services.sh

            # Create env file
            cat << EOF > .env
            DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
            EUREKA_USERNAME=craftpilot
            EUREKA_PASSWORD=${EUREKA_PASSWORD}
            GCP_SA_KEY_PATH=/opt/craftpilot/gcp-credentials.json
            GCP_PROJECT_ID=${GCP_PROJECT_ID}
            REDIS_PASSWORD=${REDIS_PASSWORD}
            GMAIL_SERVICE_ACCOUNT=${GMAIL_SERVICE_ACCOUNT}
            GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
            VERSION=latest
            EOF

            # Setup GCP credentials
            echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
            chmod 600 /opt/craftpilot/gcp-credentials.json

            # Run deployment script function
            ./start-services.sh 2>&1 | tee deployment.log || {
                echo "=== Deployment Failed ==="
                echo "=== Last 100 lines of logs ==="
                tail -n 100 deployment.log}
                exit 1
            }   echo "Checking $service on port $port..."
                for i in $(seq 1 $max_attempts); do


















            }                fi                    exit 1                    echo "Recovery failed for $service"                if ! check_service_health $service; then                # Final check                                sleep 30                docker restart $service                # Restart attempt                                docker network inspect craftpilot-network                docker inspect $service                docker logs $service                echo "=== Failure Recovery for $service ==="                local service=$1            handle_failure() {                    if curl -sf "http://localhost:${port}/actuator/health"; then
                        echo "$service is healthy!"
                        return 0
                    fi
                    
                    if [ $((i % 5)) -eq 0 ]; then
                        echo "Container logs for $service:"
                        docker logs $service
                    fi
                    
                    sleep 10
                done
                
                return 1
            }

            # Run deployment script
            ./start-services.sh 2>&1 | tee deployment.log || {
                echo "=== Deployment Failed ==="
                echo "=== Last 100 lines of logs ==="
                tail -n 100 deployment.log
                exit 1
            }
