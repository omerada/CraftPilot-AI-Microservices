name: Deploy Services

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - "docker-compose.yml"
      - "deploy.sh"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Docker setup
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker compose içeriğini base64'e çevir
      - name: Encode docker-compose
        run: |
          DOCKER_COMPOSE_CONTENT=$(cat docker-compose.yml | base64 -w 0)
          echo "DOCKER_COMPOSE_CONTENT=$DOCKER_COMPOSE_CONTENT" >> $GITHUB_ENV

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          EUREKA_USERNAME: craftpilot
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GMAIL_SERVICE_ACCOUNT: ${{ secrets.GMAIL_SERVICE_ACCOUNT }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,EUREKA_USERNAME,EUREKA_PASSWORD,GCP_SA_KEY,GCP_PROJECT_ID,REDIS_PASSWORD,GMAIL_SERVICE_ACCOUNT,GRAFANA_ADMIN_PASSWORD,DOCKER_COMPOSE_CONTENT
          script: |
            # 1. Preparation
            mkdir -p /opt/craftpilot
            cd /opt/craftpilot

            # Setup env and credentials
            echo "$DOCKER_COMPOSE_CONTENT" | base64 -d > docker-compose.yml
            echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
            chmod 600 /opt/craftpilot/gcp-credentials.json

            # Create environment file
            cat << EOF > .env
            DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
            EUREKA_USERNAME=craftpilot
            EUREKA_PASSWORD=${EUREKA_PASSWORD}
            GCP_SA_KEY_PATH=/opt/craftpilot/gcp-credentials.json
            GCP_PROJECT_ID=${GCP_PROJECT_ID}
            REDIS_PASSWORD=${REDIS_PASSWORD}
            GMAIL_SERVICE_ACCOUNT=${GMAIL_SERVICE_ACCOUNT}
            GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
            VERSION=latest
            EOF

            # 2. Infrastructure Services
            echo "=== Starting Infrastructure Services ==="

            # Stop existing infrastructure containers
            docker stop redis zookeeper kafka || true
            docker rm redis zookeeper kafka || true

            # Start Redis with proper configuration
            docker run -d \
              --name redis \
              --network craftpilot-network \
              -p 6379:6379 \
              -e REDIS_PASSWORD=${REDIS_PASSWORD} \
              redis:latest redis-server --requirepass ${REDIS_PASSWORD}

            # Wait and verify Redis
            sleep 10
            if ! docker exec redis redis-cli -a ${REDIS_PASSWORD} ping | grep -q "PONG"; then
              echo "Redis failed to start properly"
              exit 1
            fi

            # Start Zookeeper
            docker run -d \
              --name zookeeper \
              --network craftpilot-network \
              -e ZOOKEEPER_CLIENT_PORT=2181 \
              -e ZOOKEEPER_TICK_TIME=2000 \
              confluentinc/cp-zookeeper:latest

            # Wait for Zookeeper
            sleep 15

            # Start Kafka
            docker run -d \
              --name kafka \
              --network craftpilot-network \
              -p 9092:9092 \
              -e KAFKA_BROKER_ID=1 \
              -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 \
              -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
              confluentinc/cp-kafka:latest

            # Wait for Kafka
            sleep 20

            # 3. Start Eureka Server
            echo "=== Starting Eureka Server ==="
            docker pull ${DOCKERHUB_USERNAME}/eureka-server:latest-arm64
            docker stop eureka-server || true
            docker rm eureka-server || true

            docker run -d \
              --name eureka-server \
              --network craftpilot-network \
              -p 8761:8761 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_USERNAME=craftpilot \
              -e EUREKA_PASSWORD=${EUREKA_PASSWORD} \
              ${DOCKERHUB_USERNAME}/eureka-server:latest-arm64

            # Wait for Eureka
            echo "Waiting for Eureka Server..."
            for i in {1..30}; do
              if curl -sf http://localhost:8761/actuator/health; then
                echo "Eureka Server is healthy"
                break
              fi
              echo "Waiting for Eureka Server... Attempt $i/30"
              sleep 10
            done

            # 4. Start Other Services using docker-compose
            docker-compose pull
            docker-compose up -d --remove-orphans

            # 5. Health Checks
            declare -A services=(
              ["eureka-server"]=8761
              ["api-gateway"]=8080
              ["redis-service"]=8079
              ["kafka-service"]=9092
              ["user-service"]=8060
              ["credit-service"]=8058
              ["subscription-service"]=8052
              ["notification-service"]=8053
              ["analytics-service"]=8064
              ["admin-service"]=8063
              ["llm-service"]=8062
              ["image-service"]=8056
            )

            for service in "${!services[@]}"; do
              port="${services[$service]}"
              echo "Checking $service on port $port..."
              for i in {1..10}; do
                if curl -sf "http://localhost:${port}/actuator/health"; then
                  echo "$service is healthy"
                  break
                fi
                echo "Attempt $i: Waiting for $service..."
                sleep 15
              done
            done
