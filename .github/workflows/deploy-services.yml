name: Deploy Services

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - "docker-compose.yml"
      - "deploy.sh"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Docker setup
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker compose içeriğini base64'e çevir
      - name: Encode docker-compose
        run: |
          DOCKER_COMPOSE_CONTENT=$(cat docker-compose.yml | base64 -w 0)
          echo "DOCKER_COMPOSE_CONTENT=$DOCKER_COMPOSE_CONTENT" >> $GITHUB_ENV

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          EUREKA_USERNAME: craftpilot
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GMAIL_SERVICE_ACCOUNT: ${{ secrets.GMAIL_SERVICE_ACCOUNT }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,EUREKA_USERNAME,EUREKA_PASSWORD,GCP_SA_KEY,GCP_PROJECT_ID,REDIS_PASSWORD,GMAIL_SERVICE_ACCOUNT,GRAFANA_ADMIN_PASSWORD,DOCKER_COMPOSE_CONTENT
          script: |
            # Proje dizinini oluştur
            mkdir -p /opt/craftpilot
            cd /opt/craftpilot

            # docker-compose.yml dosyasını oluştur
            echo "$DOCKER_COMPOSE_CONTENT" | base64 -d > docker-compose.yml

            # Docker Hub login
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

            # 1. Infrastructure Services
            echo "=== Starting Infrastructure Services ==="
            docker network create craftpilot-network || true

            # Start Redis
            if ! docker ps -q -f name=redis; then
              echo "Starting Redis..."
              docker run -d \
                --name redis \
                --network craftpilot-network \
                -p 6379:6379 \
                -e REDIS_PASSWORD=${REDIS_PASSWORD} \
                redis:latest --requirepass ${REDIS_PASSWORD}
              sleep 10
            fi

            # Start Zookeeper
            if ! docker ps -q -f name=zookeeper; then
              echo "Starting Zookeeper..."
              docker run -d \
                --name zookeeper \
                --network craftpilot-network \
                -e ZOOKEEPER_CLIENT_PORT=2181 \
                -e ZOOKEEPER_TICK_TIME=2000 \
                confluentinc/cp-zookeeper:latest
              sleep 15
            fi

            # Start Kafka
            if ! docker ps -q -f name=kafka; then
              echo "Starting Kafka..."
              docker run -d \
                --name kafka \
                --network craftpilot-network \
                -p 9092:9092 \
                -e KAFKA_BROKER_ID=1 \
                -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
                -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 \
                -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
                confluentinc/cp-kafka:latest
              sleep 20
            fi

            # 2. Core Services (sıralı başlatma)
            echo "=== Starting Core Services ==="

            # Service update order
            core_services=(
              "eureka-server"      # Service Discovery
              "api-gateway"        # API Gateway
              "redis-service"      # Redis Service
              "kafka-service"      # Kafka Service
            )

            # Update and start core services
            for service in "${core_services[@]}"; do
              update_service ${service}
              echo "Waiting for ${service} to be ready..."
              sleep 20
            done

            # 3. Business Services
            echo "=== Starting Business Services ==="

            # Service update order
            business_services=(
              "user-service"           # User Management
              "credit-service"         # Credit Management
              "subscription-service"    # Subscription Management
              "notification-service"    # Notifications
              "analytics-service"      # Analytics
              "admin-service"          # Admin Operations
              "llm-service"           # LLM Operations
              "image-service"         # Image Operations
            )

            # Update and start business services
            for service in "${business_services[@]}"; do
              update_service ${service}
              sleep 10
            done

            # Environment dosyasını oluştur
            cat << EOF > .env
            DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
            EUREKA_USERNAME=${EUREKA_USERNAME}
            EUREKA_PASSWORD=${EUREKA_PASSWORD}
            GCP_SA_KEY_PATH=/opt/craftpilot/gcp-credentials.json
            GCP_PROJECT_ID=${GCP_PROJECT_ID}
            REDIS_PASSWORD=${REDIS_PASSWORD}
            GMAIL_SERVICE_ACCOUNT=${GMAIL_SERVICE_ACCOUNT}
            GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
            VERSION=latest
            EOF

            # GCP credentials dosyasını oluştur
            echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
            chmod 600 /opt/craftpilot/gcp-credentials.json

            # Docker Compose ile yeni servisleri başlat
            docker-compose pull || true
            docker-compose up -d --remove-orphans

            # Health check
            echo "Servislerin durumu kontrol ediliyor..."
            sleep 30

            # Her servis için health check
            declare -A service_ports=(
              ["eureka-server"]="8761"
              ["api-gateway"]="8080"
              ["llm-service"]="8062"
              ["credit-service"]="8058"
              ["analytics-service"]="8064"
              ["admin-service"]="8063"
              ["user-service"]="8060"
              ["kafka-service"]="9092"
              ["redis-service"]="8079"
              ["notification-service"]="8053"
              ["subscription-service"]="8052"
              ["image-service"]="8056"
            )

            for service in "${!service_ports[@]}"; do
              port="${service_ports[$service]}"
              echo "Kontrol ediliyor: ${service} on port ${port}"
              
              for i in {1..5}; do
                if curl -sf "http://localhost:${port}/actuator/health"; then
                  echo "${service} sağlıklı!"
                  break
                fi
                
                if [ $i -eq 5 ]; then
                  echo "${service} başlatılamadı!"
                  docker logs ${service}
                  docker-compose logs ${service}
                  exit 1
                fi
                
                echo "Deneme $i: ${service} bekleniyor..."
                sleep 10
              done
            done

            echo "Tüm servisler başarıyla güncellendi ve başlatıldı!"

            # Kullanılmayan container ve image'ları temizle
            docker system prune -f --volumes
