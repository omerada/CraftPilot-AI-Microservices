name: Deploy Services

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - "docker-compose.yml"
      - "deploy.sh"

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Infrastructure Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "=== Creating Docker Network ==="
            docker network create craftpilot-network || true

            echo "=== Starting Zookeeper and Kafka ==="
            # Zookeeper için Docker container başlat
            docker run -d \
              --name zookeeper \
              --network craftpilot-network \
              -e ZOOKEEPER_CLIENT_PORT=2181 \
              -e ZOOKEEPER_TICK_TIME=2000 \
              confluentinc/cp-zookeeper:latest

            # Zookeeper'ın başlamasını bekle
            sleep 10

            # Kafka için Docker container başlat
            docker run -d \
              --name kafka \
              --network craftpilot-network \
              -p 9092:9092 \
              -e KAFKA_BROKER_ID=1 \
              -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 \
              -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT \
              -e KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT \
              -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
              -e KAFKA_AUTO_CREATE_TOPICS_ENABLE="true" \
              confluentinc/cp-kafka:latest

            # Redis container'ını başlat
            echo "=== Starting Redis ==="
            if [ ! "$(docker ps -q -f name=redis)" ]; then
                if [ "$(docker ps -aq -f status=exited -f name=redis)" ]; then
                    # Eğer container varsa ama çalışmıyorsa, kaldır
                    docker rm redis
                fi
                # Yeni Redis container'ı başlat
                docker run -d \
                  --name redis \
                  --network craftpilot-network \
                  -p 6379:6379 \
                  redis:latest
                
                # Redis'in başlamasını bekle
                sleep 10
            else
                echo "Redis container zaten çalışıyor"
            fi

            # Kafka'nın başlamasını bekle
            sleep 20

            echo "=== Infrastructure Services Started ==="

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          EUREKA_USERNAME: craftpilot
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GMAIL_SERVICE_ACCOUNT: ${{ secrets.GMAIL_SERVICE_ACCOUNT }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,EUREKA_USERNAME,EUREKA_PASSWORD,GCP_SA_KEY,GCP_PROJECT_ID,REDIS_PASSWORD,GMAIL_SERVICE_ACCOUNT,GRAFANA_ADMIN_PASSWORD
          script: |
            # Proje dizinine git
            cd /opt/craftpilot

            # Git repo'yu klonla veya güncelle
            if [ -d ".git" ]; then
              git pull origin master
            else
              git clone https://github.com/yourusername/Craft-Pilot-Ai.git .
            fi

            # Deploy script'i çalıştırılabilir yap ve çalıştır
            chmod +x deploy.sh
            ./deploy.sh

            # Hata kontrolü
            if [ $? -ne 0 ]; then
              echo "Deployment failed!"
              docker-compose logs
              exit 1
            fi

            # Sağlık kontrolü
            echo "Checking service health..."
            sleep 30

            # Eureka kontrolü
            if ! curl -s http://localhost:8761/actuator/health | grep -q "UP"; then
              echo "Eureka Server is not healthy!"
              docker-compose logs eureka-server
              exit 1
            fi

            echo "Deployment completed successfully!"
