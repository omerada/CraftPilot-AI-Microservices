name: Credit Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "credit-service/**"
      - ".github/workflows/credit-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: |
          cd credit-service
          chmod +x mvnw

      - name: Build
        run: |
          cd credit-service
          ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./credit-service
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/credit-service:latest-arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Ensure network exists
            echo "=== Creating or verifying network ==="
            docker network create craftpilot-network 2>/dev/null || true

            # Determine MongoDB container and connection info
            echo "=== Checking MongoDB container ==="
            MONGODB_CONTAINER="craftpilot-mongodb"
            if ! docker ps | grep -q "$MONGODB_CONTAINER"; then
              echo "WARNING: Default MongoDB container not found, trying alternative names..."
              MONGODB_CONTAINER=$(docker ps --format '{{.Names}}' | grep -E 'mongo|mongodb' | head -n 1)
              
              if [ -z "$MONGODB_CONTAINER" ]; then
                echo "ERROR: No MongoDB container found, using default name"
                MONGODB_CONTAINER="craftpilot-mongodb"
              else
                echo "Found MongoDB container: $MONGODB_CONTAINER"
              fi
            fi
            echo "Using MongoDB container: $MONGODB_CONTAINER"

            # Configure MongoDB URI
            if [ -n "${{ secrets.MONGODB_URI }}" ]; then
              # Use the URI directly from secrets if available
              MONGODB_URI="${{ secrets.MONGODB_URI }}"
              echo "Using pre-configured MongoDB URI from secrets"
            else
              # Otherwise, build the URI from components
              MONGODB_URI="mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@${MONGODB_CONTAINER}:27017/${{ secrets.MONGO_INITDB_DATABASE || 'craftpilot' }}?authSource=admin&retryWrites=true&w=majority&serverSelectionTimeoutMS=30000&connectTimeoutMS=20000&socketTimeoutMS=60000"
              echo "Built MongoDB URI from credential components"
            fi
            echo "MongoDB URI: $(echo $MONGODB_URI | sed 's/:[^:]*@/:\*\*\*@/g')"

            # Deploy Credit Service
            echo "=== Deploying Credit Service ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/credit-service:latest-arm64
            docker stop credit-service || true
            docker rm credit-service || true

            docker run -d \
              --name credit-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8058:8058 \
              -v /opt/craftpilot/gcp-credentials.json:/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e GOOGLE_APPLICATION_CREDENTIALS=/gcp-credentials.json \
              -e SPRING_SECURITY_USER_NAME=craftpilot \
              -e SPRING_SECURITY_USER_PASSWORD=13579ada \
              -e MONGODB_URI="$MONGODB_URI" \
              -e MONGODB_DATABASE="${{ secrets.MONGO_INITDB_DATABASE || 'craftpilot' }}" \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE="health,info,metrics,prometheus" \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              ${{ secrets.DOCKERHUB_USERNAME }}/credit-service:latest-arm64

            # Verify MongoDB connection
            echo "=== Verifying MongoDB connection ==="
            sleep 5
            if docker exec credit-service nc -z -w5 $MONGODB_CONTAINER 27017; then
              echo "✅ MongoDB connection successful"
            else
              echo "⚠️ MongoDB connection check failed"
              echo "Testing connection from host machine..."
              nc -z -w5 localhost 27017 && echo "Host can connect to MongoDB" || echo "Host cannot connect to MongoDB"
              
              # Check network details
              echo "Container network details:"
              docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' credit-service
              docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $MONGODB_CONTAINER
            fi

            # Enhanced health check with longer timeout
            echo "=== Waiting for service to start ==="
            MAX_ATTEMPTS=12
            ATTEMPT=1

            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS"
              
              # Check container status
              if ! docker ps | grep -q "credit-service"; then
                echo "Container stopped unexpectedly! Checking logs..."
                docker logs credit-service
                exit 1
              fi
              
              # Check health
              if curl -s http://localhost:8058/actuator/health | grep -q "UP"; then
                echo "✅ Service is healthy"
                exit 0
              fi
              
              echo "Service not ready yet... Waiting"
              
              # Show logs at middle of attempts
              if [ $ATTEMPT -eq 6 ]; then
                echo "Service logs:"
                docker logs credit-service --tail 50
              fi
              
              ATTEMPT=$((ATTEMPT + 1))
              sleep 10
            done

            echo "❌ Service failed to become healthy within timeout"
            docker logs credit-service
            exit 1
