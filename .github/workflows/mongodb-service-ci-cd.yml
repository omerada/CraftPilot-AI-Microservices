name: MongoDB Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "mongodb-service/**"
      - ".github/workflows/mongodb-service-ci-cd.yml"
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: "Action to perform"
        options:
          - deploy
          - restart
          - backup
          - restore
          - status
        default: "restart"
      clean_data:
        type: boolean
        description: "⚠️ TEHLİKE: Volume'ları temizle (tüm veriler silinir!)"
        default: false
      backup_file:
        type: string
        description: "Geri yüklenecek yedek dosyası (restore işlemi için)"
        required: false

jobs:
  deploy-mongodb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: "10m"
          script: |
            echo "==== MongoDB Servisi Yönetimi Başlatılıyor ===="

            set -e

            # MongoDB dizinini oluştur
            mkdir -p /opt/craftpilot/mongodb-service
            cd /opt/craftpilot/mongodb-service

            # Docker ağını oluştur (eğer yoksa)
            docker network inspect craftpilot-network >/dev/null 2>&1 || docker network create craftpilot-network

            # İşlem türünü belirle
            ACTION="${{ github.event.inputs.action }}"
            CLEAN_DATA="${{ github.event.inputs.clean_data }}"
            BACKUP_FILE="${{ github.event.inputs.backup_file }}"

            # Eğer volume'ları temizleme isteniyorsa ve onay verildiyse
            if [ "$CLEAN_DATA" == "true" ]; then
              echo "==== ⚠️ TEHLİKE: MongoDB Volume'ları Temizleniyor! ===="
              docker stop craftpilot-mongodb craftpilot-mongo-express || true
              docker rm craftpilot-mongodb craftpilot-mongo-express || true
              sudo rm -rf ./mongo-data ./mongo-config ./backups || true
              mkdir -p ./mongo-data ./mongo-config ./backups
              echo "==== Volume'lar Temizlendi! ===="
            fi

            # Repository'den dosyaları kopyala
            echo "Configürasyon dosyalarını kopyalama"

            # init-mongo.js oluştur
            cat > init-mongo.js << 'EOL'
            // MongoDB başlangıç yapılandırma dosyası
            db = db.getSiblingDB("admin");

            // Uygulama veritabanı oluşturma
            db = db.getSiblingDB("craftpilot");

            // Koleksiyonlar oluşturma
            db.createCollection("users");
            db.createCollection("subscriptions");
            db.createCollection("credits");
            db.createCollection("projects");
            db.createCollection("analytics");
            db.createCollection("logs");

            // Uygulama için ayrı kullanıcı oluşturma (daha kısıtlı yetkilerle)
            db = db.getSiblingDB("admin");
            db.createUser({
              user: "application_user",
              pwd: "app_secure_password",
              roles: [{ role: "readWrite", db: "craftpilot" }],
            });

            // Kritik koleksiyonlar için indeksler oluşturma
            db = db.getSiblingDB("craftpilot");

            // Users koleksiyonu için indeksler
            db.users.createIndex({ email: 1 }, { unique: true });
            db.users.createIndex({ uid: 1 }, { unique: true });
            db.users.createIndex({ createdAt: 1 });

            // Subscriptions koleksiyonu için indeksler
            db.subscriptions.createIndex({ userId: 1 });
            db.subscriptions.createIndex({ status: 1 });
            db.subscriptions.createIndex({ expiresAt: 1 });

            // Credits koleksiyonu için indeksler
            db.credits.createIndex({ userId: 1 });
            db.credits.createIndex({ createdAt: 1 });

            // Projects koleksiyonu için indeksler
            db.projects.createIndex({ userId: 1 });
            db.projects.createIndex({ createdAt: 1 });

            // Log koleksiyonu için TTL indeksi (30 gün sonra otomatik silme)
            db.logs.createIndex({ timestamp: 1 }, { expireAfterSeconds: 2592000 });

            // Analytics koleksiyonu için indeksler
            db.analytics.createIndex({ userId: 1 });
            db.analytics.createIndex({ eventDate: 1 });
            db.analytics.createIndex({ eventType: 1 });

            print("MongoDB başlatma işlemi tamamlandı");
            EOL

            # Scripts dizinini oluştur
            mkdir -p scripts

            cat > scripts/backup.sh << 'EOL'
            #!/bin/bash
            set -e

            # Env dosyasını yükle
            if [ -f "../.env" ]; then
              source ../.env
            else
              echo "Uyarı: .env dosyası bulunamadı, varsayılan değerler kullanılıyor..."
              MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-craftpilot}
              MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-secure_password}
              MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-craftpilot}
              MONGO_PORT=${MONGO_PORT:-27017}
            fi

            # Yedekleme dizini oluştur
            BACKUP_DIR="../backups"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_PATH="$BACKUP_DIR/backup_$TIMESTAMP"

            mkdir -p $BACKUP_DIR
            mkdir -p $BACKUP_PATH

            echo "MongoDB yedeklemesi başlatılıyor: $BACKUP_PATH"

            # Docker container üzerinden mongodump çalıştır
            docker exec craftpilot-mongodb mongodump \
              --host localhost \
              --port 27017 \
              --username $MONGO_ROOT_USERNAME \
              --password $MONGO_ROOT_PASSWORD \
              --authenticationDatabase admin \
              --db $MONGO_INITDB_DATABASE \
              --out /data/db/backup

            # Yedeklenen dosyaları host sistemine kopyala
            docker cp craftpilot-mongodb:/data/db/backup/. $BACKUP_PATH

            # Container içindeki yedek dosyalarını temizle
            docker exec craftpilot-mongodb rm -rf /data/db/backup

            # Yedekleri sıkıştır
            cd $BACKUP_DIR
            tar -czf "backup_$TIMESTAMP.tar.gz" "backup_$TIMESTAMP"
            rm -rf "backup_$TIMESTAMP"

            echo "Yedekleme tamamlandı: $BACKUP_DIR/backup_$TIMESTAMP.tar.gz"

            # Eski yedekleri temizle (30 günden eski)
            find $BACKUP_DIR -name "backup_*.tar.gz" -type f -mtime +30 -delete
            echo "30 günden eski yedekler temizlendi"
            EOL

            cat > scripts/restore.sh << 'EOL'
            #!/bin/bash
            set -e

            # Env dosyasını yükle
            if [ -f "../.env" ]; then
              source ../.env
            else
              echo "Uyarı: .env dosyası bulunamadı, varsayılan değerler kullanılıyor..."
              MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-craftpilot}
              MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-secure_password}
              MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-craftpilot}
              MONGO_PORT=${MONGO_PORT:-27017}
            fi

            # Yedekleme dosyasını kontrol et
            if [ -z "$1" ]; then
              echo "Hata: Geri yüklenecek yedek dosyası belirtilmedi!"
              echo "Kullanım: $0 backup_dosyası.tar.gz"
              exit 1
            fi

            BACKUP_FILE=$1
            BACKUP_DIR="../backups"
            TEMP_DIR="$BACKUP_DIR/temp_restore"

            # Dosyanın varlığını kontrol et
            if [ ! -f "$BACKUP_DIR/$BACKUP_FILE" ]; then
              echo "Hata: $BACKUP_DIR/$BACKUP_FILE bulunamadı!"
              exit 1
            fi

            echo "MongoDB geri yükleme işlemi başlatılıyor: $BACKUP_FILE"

            # Geçici dizini temizle ve oluştur
            rm -rf $TEMP_DIR
            mkdir -p $TEMP_DIR

            # Yedek dosyasını aç
            tar -xzf "$BACKUP_DIR/$BACKUP_FILE" -C $TEMP_DIR

            # Geri yüklenecek veritabanını belirle
            RESTORE_DB_DIR=$(find $TEMP_DIR -type d -name "$MONGO_INITDB_DATABASE")

            if [ -z "$RESTORE_DB_DIR" ]; then
              echo "Hata: Yedek içinde $MONGO_INITDB_DATABASE veritabanı bulunamadı!"
              rm -rf $TEMP_DIR
              exit 1
            fi

            # Veritabanını Docker container'ına kopyala
            docker exec -it craftpilot-mongodb mkdir -p /data/db/restore
            docker cp $RESTORE_DB_DIR/. craftpilot-mongodb:/data/db/restore

            # mongorestore komutunu çalıştır
            docker exec -it craftpilot-mongodb mongorestore \
              --host localhost \
              --port 27017 \
              --username $MONGO_ROOT_USERNAME \
              --password $MONGO_ROOT_PASSWORD \
              --authenticationDatabase admin \
              --db $MONGO_INITDB_DATABASE \
              --drop \
              /data/db/restore

            # Geçici dizinleri temizle
            docker exec craftpilot-mongodb rm -rf /data/db/restore
            rm -rf $TEMP_DIR

            echo "Geri yükleme işlemi tamamlandı: $BACKUP_FILE -> $MONGO_INITDB_DATABASE"
            EOL

            chmod +x scripts/backup.sh scripts/restore.sh

            # .env dosyasını oluştur
            cat > .env << EOL
            MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
            MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
            MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE || 'craftpilot' }}
            MONGO_PORT=27017
            MONGO_CACHE_SIZE_GB=0.5
            MONGO_EXPRESS_USER=${{ secrets.MONGO_EXPRESS_USER }}
            MONGO_EXPRESS_PASSWORD=${{ secrets.MONGO_EXPRESS_PASSWORD }}
            MONGO_EXPRESS_PORT=8081
            MONGODB_URI=mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@mongodb:27017/${{ secrets.MONGO_INITDB_DATABASE || 'craftpilot' }}?authSource=admin&retryWrites=true&w=majority
            MONGODB_URI_EXTERNAL=mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@localhost:27017/${{ secrets.MONGO_INITDB_DATABASE || 'craftpilot' }}?authSource=admin&retryWrites=true&w=majority
            EOL

            # Yükleme için gerekli değişkenleri tanımla
            export MONGO_ROOT_USERNAME="${{ secrets.MONGO_ROOT_USERNAME }}"
            export MONGO_ROOT_PASSWORD="${{ secrets.MONGO_ROOT_PASSWORD }}"
            export MONGO_INITDB_DATABASE="${{ secrets.MONGO_INITDB_DATABASE || 'craftpilot' }}"
            export MONGO_PORT="27017"
            export MONGO_CACHE_SIZE_GB="0.5"
            export MONGO_EXPRESS_USER="${{ secrets.MONGO_EXPRESS_USER }}"
            export MONGO_EXPRESS_PASSWORD="${{ secrets.MONGO_EXPRESS_PASSWORD }}"
            export MONGO_EXPRESS_PORT="8081"

            # Dizin yapısını oluştur
            mkdir -p ./backups

            case "$ACTION" in
              deploy|restart)
                echo "==== MongoDB Servislerini Durdurma ===="
                docker stop craftpilot-mongodb craftpilot-mongo-express || true
                docker rm craftpilot-mongodb craftpilot-mongo-express || true
                
                echo "==== MongoDB Servisini Başlatma ===="
                docker run -d \
                  --name craftpilot-mongodb \
                  --network craftpilot-network \
                  --restart unless-stopped \
                  -e MONGO_INITDB_ROOT_USERNAME="${MONGO_ROOT_USERNAME:-craftpilot}" \
                  -e MONGO_INITDB_ROOT_PASSWORD="${MONGO_ROOT_PASSWORD:-secure_password}" \
                  -e MONGO_INITDB_DATABASE="${MONGO_INITDB_DATABASE:-craftpilot}" \
                  -e TZ="UTC" \
                  -v "$(pwd)/mongo-data:/data/db" \
                  -v "$(pwd)/mongo-config:/data/configdb" \
                  -v "$(pwd)/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro" \
                  -p "${MONGO_PORT:-27017}:27017" \
                  --health-cmd="echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/admin --quiet --username ${MONGO_ROOT_USERNAME:-craftpilot} --password ${MONGO_ROOT_PASSWORD:-secure_password} --authenticationDatabase admin | grep 1" \
                  --health-interval=10s \
                  --health-timeout=5s \
                  --health-retries=5 \
                  --health-start-period=30s \
                  --log-driver json-file \
                  --log-opt max-size=50m \
                  --log-opt max-file=3 \
                  mongo:6.0 \
                  --wiredTigerCacheSizeGB ${MONGO_CACHE_SIZE_GB:-0.5} --setParameter maxTransactionLockRequestTimeoutMillis=5000 --auth --bind_ip_all

                echo "==== MongoDB Express Servisini Başlatma ===="
                # MongoDB'nin başlamasını bekle
                sleep 10

                docker run -d \
                  --name craftpilot-mongo-express \
                  --network craftpilot-network \
                  --restart unless-stopped \
                  -e ME_CONFIG_MONGODB_SERVER="mongodb" \
                  -e ME_CONFIG_MONGODB_PORT="27017" \
                  -e ME_CONFIG_MONGODB_ADMINUSERNAME="${MONGO_ROOT_USERNAME:-craftpilot}" \
                  -e ME_CONFIG_MONGODB_ADMINPASSWORD="${MONGO_ROOT_PASSWORD:-secure_password}" \
                  -e ME_CONFIG_BASICAUTH_USERNAME="${MONGO_EXPRESS_USER:-admin}" \
                  -e ME_CONFIG_BASICAUTH_PASSWORD="${MONGO_EXPRESS_PASSWORD:-admin_pass}" \
                  -e ME_CONFIG_SITE_BASEURL="/" \
                  -e ME_CONFIG_MONGODB_ENABLE_ADMIN="true" \
                  -e ME_CONFIG_OPTIONS_EDITORTHEME="ambiance" \
                  -p "${MONGO_EXPRESS_PORT:-8081}:8081" \
                  --health-cmd="wget --quiet --tries=1 --spider http://${MONGO_EXPRESS_USER:-admin}:${MONGO_EXPRESS_PASSWORD:-admin_pass}@localhost:8081 || exit 1" \
                  --health-interval=30s \
                  --health-timeout=10s \
                  --health-retries=3 \
                  --health-start-period=30s \
                  mongo-express:latest
                
                # Servisin başlamasını bekle
                echo "==== MongoDB'nin başlaması bekleniyor ===="
                sleep 20
                
                # Sağlık kontrolü
                if docker exec craftpilot-mongodb mongosh --quiet --eval "db.runCommand('ping').ok" admin -u ${{ secrets.MONGO_ROOT_USERNAME }} -p ${{ secrets.MONGO_ROOT_PASSWORD }} | grep -q 1; then
                  echo "✅ MongoDB başarıyla çalışıyor!"
                else
                  echo "❌ MongoDB başlatılamadı!"
                  docker logs craftpilot-mongodb
                  exit 1
                fi

                # Mongo Express'in sağlık kontrolü
                if curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.MONGO_EXPRESS_USER }}:${{ secrets.MONGO_EXPRESS_PASSWORD }}@localhost:8081 | grep -q 200; then
                  echo "✅ Mongo Express başarıyla çalışıyor!"
                else
                  echo "⚠️ Mongo Express başlatılamadı, loglar kontrol ediliyor..."
                  docker logs craftpilot-mongo-express
                fi
                ;;
                
              backup)
                echo "==== MongoDB Yedeği Alınıyor ===="
                cd scripts
                ./backup.sh
                echo "==== En Son Alınan Yedekler ===="
                ls -lh ../backups
                ;;
              
              restore)
                if [ -z "$BACKUP_FILE" ]; then
                  echo "Hata: Geri yüklenecek yedek dosyası belirtilmedi!"
                  echo "Kullanım: backup_20230301_120000.tar.gz formatında bir dosya adı belirtin"
                  exit 1
                fi
                
                echo "==== MongoDB Yedeği Geri Yükleniyor: $BACKUP_FILE ===="
                cd scripts
                ./restore.sh $BACKUP_FILE
                ;;
                
              status)
                echo "==== MongoDB Servis Durumu ===="
                docker ps -a | grep craftpilot-mongodb
                docker ps -a | grep craftpilot-mongo-express
                
                echo "==== MongoDB Bağlantı Bilgileri ===="
                docker exec craftpilot-mongodb mongosh --quiet --eval "db.serverStatus().connections" admin -u ${{ secrets.MONGO_ROOT_USERNAME }} -p ${{ secrets.MONGO_ROOT_PASSWORD }}
                
                echo "==== MongoDB Depolama Bilgileri ===="
                docker exec craftpilot-mongodb df -h /data/db
                
                echo "==== MongoDB Veritabanları ===="
                docker exec craftpilot-mongodb mongosh --quiet --eval "db.adminCommand('listDatabases')" admin -u ${{ secrets.MONGO_ROOT_USERNAME }} -p ${{ secrets.MONGO_ROOT_PASSWORD }}
                
                echo "==== MongoDB İstatistikleri ===="
                docker exec craftpilot-mongodb mongosh --quiet --eval "db.stats()" admin -u ${{ secrets.MONGO_ROOT_USERNAME }} -p ${{ secrets.MONGO_ROOT_PASSWORD }}
                ;;
                
              *)
                echo "Geçersiz işlem: $ACTION"
                exit 1
                ;;
            esac

            echo "==== MongoDB Servisi Yönetimi Tamamlandı ===="

            # Bağlantı bilgilerini görüntüle
            if [ "$ACTION" = "deploy" ] || [ "$ACTION" = "restart" ]; then
              echo ""
              echo "==== MongoDB Bağlantı Bilgileri ===="
              echo "MongoDB URI (service): mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@mongodb:27017/${{ secrets.MONGO_INITDB_DATABASE || 'craftpilot' }}?authSource=admin&retryWrites=true&w=majority"
              echo "MongoDB URI (external): mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@localhost:27017/${{ secrets.MONGO_INITDB_DATABASE || 'craftpilot' }}?authSource=admin&retryWrites=true&w=majority"
              echo "Mongo Express: http://localhost:8081"
              echo ""
              echo "Bu bilgilerin GitHub Secrets'a eklenmesi gerekiyor!"
            fi
