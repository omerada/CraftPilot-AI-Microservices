name: Image Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "image-service/**"
      - ".github/workflows/image-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: |
          cd image-service
          chmod +x mvnw

      - name: Build
        run: |
          cd image-service
          ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./image-service
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/image-service:latest-arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error

            # Ensure network exists
            echo "=== Creating or verifying network ==="
            docker network create craftpilot-network 2>/dev/null || true

            # Deploy Image Service
            echo "=== Deploying Image Service ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/image-service:latest-arm64 || { echo "Failed to pull image"; exit 1; }
            docker stop image-service || true
            docker rm image-service || true

            # Create a deploy script to avoid issues with line continuation in SSH
            echo "=== Creating deploy script ==="
            cat > /tmp/deploy-image-service.sh << 'EOL'
            #!/bin/bash
            set -e  # Exit on error

            # Variables from GitHub secrets - will be replaced with actual values
            DOCKERHUB_USERNAME="DOCKERHUB_USERNAME_PLACEHOLDER"
            MONGODB_URI="MONGODB_URI_PLACEHOLDER"
            OPENAI_API_KEY="OPENAI_API_KEY_PLACEHOLDER"

            # Run the container
            echo "=== Starting container ==="
            docker run -d \
              --name image-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8056:8056 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8056 \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_HOSTNAME=image-service \
              -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
              -e SPRING_SECURITY_USER_NAME=craftpilot \
              -e SPRING_SECURITY_USER_PASSWORD=13579ada \
              -e SPRING_DATA_MONGODB_URI="${MONGODB_URI}" \
              -e SPRING_DATA_MONGODB_DATABASE=image-service \
              -e SPRING_DATA_REDIS_HOST=redis \
              -e SPRING_DATA_REDIS_PORT=6379 \
              -e SPRING_DATA_REDIS_PASSWORD=13579ada \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
              ${DOCKERHUB_USERNAME}/image-service:latest-arm64
            EOL

            # Replace placeholders with actual values
            sed -i "s|DOCKERHUB_USERNAME_PLACEHOLDER|${{ secrets.DOCKERHUB_USERNAME }}|g" /tmp/deploy-image-service.sh
            sed -i "s|MONGODB_URI_PLACEHOLDER|${{ secrets.MONGODB_URI }}|g" /tmp/deploy-image-service.sh
            sed -i "s|OPENAI_API_KEY_PLACEHOLDER|${{ secrets.OPENAI_API_KEY }}|g" /tmp/deploy-image-service.sh

            # Make script executable
            chmod +x /tmp/deploy-image-service.sh

            # Run the deploy script
            /tmp/deploy-image-service.sh

            # Verify container is running
            echo "=== Verifying container started ==="
            if ! docker ps | grep -q "image-service"; then
              echo "Container failed to start. Checking logs..."
              docker logs image-service || echo "No logs available"
              exit 1
            fi

            echo "=== Checking service health ==="
            MAX_ATTEMPTS=15
            ATTEMPT=1

            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS"
              
              # Check container status
              if ! docker ps | grep -q "image-service"; then
                echo "Container is not running. Checking logs..."
                docker logs image-service || echo "No logs available"
                exit 1
              fi

              # Check application health
              HEALTH_CHECK=$(docker exec -i image-service curl -s http://localhost:8056/actuator/health 2>/dev/null || echo "Failed")
              
              if echo "$HEALTH_CHECK" | grep -q "UP"; then
                echo "Service is healthy!"
                # Verify Eureka registration
                if docker logs image-service | grep -q "registration status: 204"; then
                  echo "Successfully registered with Eureka"
                  exit 0
                else
                  echo "Service is up but may not be registered with Eureka yet"
                  if [ $ATTEMPT -ge 10 ]; then
                    echo "Accepting service as healthy even without Eureka registration confirmation"
                    exit 0
                  fi
                fi
              else
                echo "Health check response: $HEALTH_CHECK"
              fi
              
              if [ $ATTEMPT -eq 7 ]; then
                echo "=== Mid-point debug information ==="
                echo "Container Status:"
                docker ps | grep image-service || echo "Container not found"
                echo "Recent Logs:"
                docker logs image-service --tail 100 || echo "No logs available"
              fi
              
              echo "Waiting before next attempt..."
              sleep 15
              ATTEMPT=$((ATTEMPT + 1))
            done

            echo "=== Health check failed - Debug information ==="
            echo "Final Container Status:"
            docker ps | grep image-service || echo "Container not found in running containers"
            echo "Container Logs:"
            docker logs image-service --tail 100 || echo "No logs available"
            exit 1
