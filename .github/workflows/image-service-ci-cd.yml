name: Image Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "image-service/**"
      - ".github/workflows/image-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: |
          cd image-service
          chmod +x mvnw

      - name: Build
        run: |
          cd image-service
          ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./image-service
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/image-service:latest-arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Deploy Image Service
            echo "=== Deploying Image Service ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/image-service:latest-arm64
            docker stop image-service || true
            docker rm image-service || true

            # Ensure craftpilot network exists
            docker network create craftpilot-network || true

            # Ensure gcp credentials directory exists
            if [ ! -f "/opt/craftpilot/gcp-credentials.json" ]; then
              echo "Warning: GCP credentials file not found at expected location"
              echo "Creating directory structure if needed..."
              sudo mkdir -p /opt/craftpilot
              sudo chmod 755 /opt/craftpilot
            fi

            # Run the container with properly formatted command
            docker run -d \
              --name image-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8056:8056 \
              -v /opt/craftpilot/gcp-credentials.json:/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e SPRING_SECURITY_USER_NAME=craftpilot \
              -e SPRING_SECURITY_USER_PASSWORD=13579ada \
              -e SPRING_DATA_MONGODB_URI=${{ secrets.MONGODB_URI }} \
              -e SPRING_DATA_MONGODB_DATABASE=image-service \
              -e SPRING_DATA_REDIS_HOST=redis \
              -e SPRING_DATA_REDIS_PORT=6379 \
              -e SPRING_DATA_REDIS_PASSWORD=13579ada \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              -e SPRING_CLOUD_GCP_PROJECT_ID=craft-pilot-ai \
              -e IMAGE_STORAGE_BUCKET_NAME=${{ secrets.GCP_STORAGE_BUCKET }} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/image-service:latest-arm64

            # Wait for container to start
            echo "=== Waiting for initial startup ==="
            sleep 30

            # Check if the container is running
            if ! docker ps | grep -q "image-service"; then
              echo "Container failed to start. Checking logs..."
              docker logs image-service
              exit 1
            fi

            # Install curl if needed
            docker exec image-service sh -c "apt-get update && apt-get install -y curl || true"

            echo "=== Checking service health ==="
            MAX_ATTEMPTS=10
            ATTEMPT=1

            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS"
              
              # Check container status
              if ! docker ps | grep -q "image-service"; then
                echo "Container is not running. Checking logs..."
                docker logs image-service
                exit 1
              fi

              # Check application health
              if docker exec -i image-service curl -s http://localhost:8056/actuator/health | grep -q "UP"; then
                echo "Service is healthy!"
                # Verify Eureka registration
                if docker logs image-service | grep -q "registration status: 204"; then
                  echo "Successfully registered with Eureka"
                  exit 0
                else
                  echo "Service is up but may not be registered with Eureka yet"
                fi
                exit 0
              fi
              
              if [ $ATTEMPT -eq 5 ]; then
                echo "=== Mid-point debug information ==="
                echo "Container Status:"
                docker ps | grep image-service
                echo "Recent Logs:"
                docker logs image-service --tail 100
              fi
              
              echo "Waiting before next attempt..."
              sleep 15
              ATTEMPT=$((ATTEMPT + 1))
            done

            echo "=== Health check failed - Debug information ==="
            echo "Final Container Status:"
            docker ps | grep image-service || echo "Container not found in running containers"
            echo "Container Logs:"
            docker logs image-service
            exit 1
