name: Image Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "image-service/**"
      - ".github/workflows/image-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Grant execute permission for mvnw
        run: |
          cd image-service
          chmod +x mvnw

      - name: Build
        run: |
          cd image-service
          ./mvnw clean package -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./image-service
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/image-service:latest-arm64

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Infrastructure setup
            docker network create craftpilot-network || true

            # Start Redis first
            echo "=== Starting Redis ==="
            if ! docker ps | grep -q redis; then
              docker run -d \
                --name redis \
                --network craftpilot-network \
                -p 6379:6379 \
                redis:latest redis-server --requirepass 13579ada
            fi

            # Wait for Redis
            echo "=== Waiting for Redis ==="
            for i in {1..30}; do
              if docker exec redis redis-cli -a 13579ada ping | grep -q "PONG"; then
                echo "Redis is ready"
                break
              fi
              echo "Waiting for Redis... attempt $i/30"
              sleep 2
            done

            # Deploy Image Service
            echo "=== Deploying Image Service ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/image-service:latest-arm64
            docker stop image-service || true
            docker rm image-service || true

            docker run -d \
              --name image-service \
              --network craftpilot-network \
              --restart unless-stopped \
              --health-cmd='wget -q --spider --proxy off localhost:8056/actuator/health || exit 1' \
              --health-interval=10s \
              --health-retries=5 \
              --health-timeout=5s \
              --health-start-period=30s \
              -p 8056:8056 \
              -v /opt/craftpilot/gcp-credentials.json:/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e GOOGLE_APPLICATION_CREDENTIALS=/gcp-credentials.json \
              -e SPRING_SECURITY_USER_NAME=craftpilot \
              -e SPRING_SECURITY_USER_PASSWORD=13579ada \
              -e SPRING_DATA_REDIS_HOST=redis \
              -e SPRING_DATA_REDIS_PORT=6379 \
              -e SPRING_DATA_REDIS_PASSWORD=13579ada \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              -e SPRING_CLOUD_GCP_PROJECT_ID=craft-pilot-ai \
              -e IMAGE_STORAGE_BUCKET_NAME=${{ secrets.GCP_STORAGE_BUCKET }} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/image-service:latest-arm64

            echo "=== Waiting for container to start ==="
            sleep 30

            echo "=== Checking container health ==="
            RETRY_COUNT=0
            MAX_RETRIES=15
            HEALTHY=false

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
              
              # Check container health status
              HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' image-service)
              
              if [ "$HEALTH_STATUS" = "healthy" ]; then
                echo "Container is healthy!"
                
                # Verify Eureka registration
                if docker logs image-service 2>&1 | grep -q "registration status: 204"; then
                  echo "Service is registered with Eureka!"
                  HEALTHY=true
                  break
                fi
              elif [ "$HEALTH_STATUS" = "unhealthy" ]; then
                echo "Container is unhealthy"
                docker logs image-service --tail 50
                exit 1
              fi
              
              # Show detailed status at midpoint
              if [ $RETRY_COUNT -eq 7 ]; then
                echo "=== Mid-point Status ==="
                docker ps -a | grep image-service
                docker inspect image-service | grep -A 10 "Health"
                docker logs image-service --tail 50
              fi
              
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep 20
            done

            if [ "$HEALTHY" = false ]; then
              echo "=== Health check failed - Final Debug Information ==="
              echo "Container Status:"
              docker ps -a | grep image-service
              echo "Health Check Status:"
              docker inspect image-service | grep -A 10 "Health"
              echo "Container Logs:"
              docker logs image-service
              exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
