name: Deploy All Services

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-deploy-services]

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Base Infrastructure
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD
          command_timeout: "30m" # Increased timeout
          script_stop: true
          script: |
            echo "=== Pre-deployment Cleanup ==="
            # Quick cleanup function
            cleanup_container() {
              local name=$1
              docker stop $name >/dev/null 2>&1 || true
              docker rm $name >/dev/null 2>&1 || true
            }

            # Cleanup existing containers
            for container in redis zookeeper kafka eureka-server api-gateway; do
              cleanup_container $container
            done

            echo "=== Network Setup ==="
            docker network rm craftpilot-network >/dev/null 2>&1 || true
            docker network create \
              --driver bridge \
              --subnet=172.20.0.0/16 \
              craftpilot-network

            echo "=== Redis Deployment ==="
            docker run -d \
              --name redis \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 6379:6379 \
              redis:latest redis-server --requirepass "${REDIS_PASSWORD}"

            # Quick Redis check
            for i in {1..5}; do
              if docker exec redis redis-cli -a "${REDIS_PASSWORD}" ping | grep -q "PONG"; then
                echo "✓ Redis is ready"
                break
              fi
              sleep 2
            done

            echo "=== Zookeeper Deployment ==="
            docker run -d \
              --name zookeeper \
              --network craftpilot-network \
              --restart unless-stopped \
              -e ZOOKEEPER_CLIENT_PORT=2181 \
              -e ZOOKEEPER_TICK_TIME=2000 \
              confluentinc/cp-zookeeper:latest

            # Wait for Zookeeper
            sleep 10

            echo "=== Kafka Deployment ==="
            docker run -d \
              --name kafka \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 9092:9092 \
              -e KAFKA_BROKER_ID=1 \
              -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 \
              -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
              confluentinc/cp-kafka:latest

            # Wait for Kafka
            sleep 15

            echo "=== Eureka Server Deployment ==="
            docker pull $DOCKERHUB_USERNAME/eureka-server:latest-arm64

            docker run -d \
              --name eureka-server \
              --hostname eureka-server \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8761:8761 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_USERNAME=craftpilot \
              -e EUREKA_PASSWORD="${EUREKA_PASSWORD}" \
              -e SERVER_PORT=8761 \
              -e EUREKA_CLIENT_REGISTER_WITH_EUREKA=false \
              -e EUREKA_CLIENT_FETCH_REGISTRY=false \
              -e EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false \
              -e EUREKA_SERVER_RENEWAL_PERCENT_THRESHOLD=0.85 \
              -e JAVA_TOOL_OPTIONS="-Xms256m -Xmx512m -XX:+UseG1GC" \
              $DOCKERHUB_USERNAME/eureka-server:latest-arm64

            # Enhanced Eureka health check
            echo "=== Waiting for Eureka Server ==="
            for i in {1..45}; do
              echo "Attempt $i/45: Checking Eureka health..."
              if curl -sf -u craftpilot:"${EUREKA_PASSWORD}" http://localhost:8761/actuator/health | grep -q "UP"; then
                echo "✓ Eureka Server is healthy"
                sleep 5  # Extra wait for full initialization
                break
              fi
              if [ $i -eq 45 ]; then
                echo "Eureka Server failed to start"
                docker logs eureka-server
                exit 1
              fi
              sleep 5
            done

            echo "Starting Redis..."
            docker run -d \
              --name redis \
              --network craftpilot-network \
              --ip 172.20.0.10 \
              -p 6379:6379 \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              redis:latest redis-server --requirepass ${{ secrets.REDIS_PASSWORD }}

            # Redis kontrolü
            echo "Verifying Redis..."
            sleep 5
            if ! docker ps | grep -q redis || ! docker exec redis redis-cli -a ${{ secrets.REDIS_PASSWORD }} ping | grep -q "PONG"; then
              echo "Redis failed to start"
              docker logs redis
              exit 1
            fi

            echo "Starting Zookeeper..."
            docker run -d \
              --name zookeeper \
              --network craftpilot-network \
              --ip 172.20.0.11 \
              -e ZOOKEEPER_CLIENT_PORT=2181 \
              -e ZOOKEEPER_TICK_TIME=2000 \
              confluentinc/cp-zookeeper:latest

            # Zookeeper kontrolü
            echo "Verifying Zookeeper..."
            sleep 10
            if ! docker ps | grep -q zookeeper; then
              echo "Zookeeper failed to start"
              docker logs zookeeper
              exit 1
            fi

            echo "Starting Kafka..."
            docker run -d \
              --name kafka \
              --network craftpilot-network \
              --ip 172.20.0.12 \
              -p 9092:9092 \
              -e KAFKA_BROKER_ID=1 \
              -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092 \
              -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT \
              -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092 \
              -e KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT \
              -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
              confluentinc/cp-kafka:latest

            # Kafka kontrolü
            echo "Verifying Kafka..."
            sleep 15
            if ! docker ps | grep -q kafka; then
              echo "Kafka failed to start"
              docker logs kafka
              exit 1
            fi

            # Eureka başlatma
            echo "Starting Eureka Server..."
            docker run -d \
              --name eureka-server \
              --hostname eureka-server \
              --network craftpilot-network \
              --ip 172.20.0.13 \
              -p 8761:8761 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_USERNAME=craftpilot \
              -e EUREKA_PASSWORD="${EUREKA_PASSWORD}" \
              -e SERVER_PORT=8761 \
              -e EUREKA_INSTANCE_HOSTNAME=eureka-server \
              -e EUREKA_CLIENT_REGISTER_WITH_EUREKA=false \
              -e EUREKA_CLIENT_FETCH_REGISTRY=false \
              -e EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false \
              -e EUREKA_SERVER_RENEWAL_PERCENT_THRESHOLD=0.85 \
              ${DOCKERHUB_USERNAME}/eureka-server:latest-arm64

            # Wait for Eureka to be fully ready
            echo "Waiting for Eureka Server to be ready..."
            for i in {1..30}; do
              if curl -sf -u craftpilot:"${EUREKA_PASSWORD}" http://localhost:8761/actuator/health | grep -q "UP"; then
                echo "✓ Eureka Server is healthy"
                sleep 10  # Additional wait to ensure full initialization
                break
              fi
              echo "Attempt $i/30: Waiting for Eureka Server..."
              sleep 5
            done

            # Enhanced Eureka health check
            echo "Waiting for Eureka to start..."
            max_retries=30
            counter=0

            while [ $counter -lt $max_retries ]; do
              counter=$((counter + 1))
              echo "Health check attempt $counter/$max_retries"
              
              if ! docker ps | grep -q "eureka-server"; then
                echo "Container failed to start"
                docker logs eureka-server
                exit 1
              fi

              if docker logs eureka-server 2>&1 | grep -q "Started EurekaServer" || \
                 curl -s -u craftpilot:"${EUREKA_PASSWORD}" http://localhost:8761/actuator/health | grep -q "UP"; then
                echo "✓ Eureka Server is healthy"
                break
              fi

              if [ $((counter % 5)) -eq 0 ]; then
                echo "Recent logs:"
                docker logs --tail 20 eureka-server
              fi
              
              sleep 10
            done

            if [ $counter -eq $max_retries ]; then
              echo "Eureka Server failed to start properly after $max_retries attempts"
              docker logs eureka-server
              exit 1
            fi

            echo "✓ Eureka Server is running successfully"

            # API Gateway deployment with enhanced configuration
            echo "=== Deploying API Gateway ==="
            docker pull $DOCKERHUB_USERNAME/api-gateway:latest-arm64

            docker run -d \
              --name api-gateway \
              --hostname api-gateway \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8080:8080 \
              -v /opt/craftpilot/gcp-credentials.json:/app/config/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8080 \
              -e SPRING_APPLICATION_NAME=api-gateway \
              -e EUREKA_CLIENT_ENABLED=true \
              -e EUREKA_CLIENT_FETCH_REGISTRY=true \
              -e EUREKA_CLIENT_REGISTER_WITH_EUREKA=true \
              -e EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE="http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/" \
              -e EUREKA_INSTANCE_HOSTNAME=api-gateway \
              -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
              -e EUREKA_INSTANCE_APPNAME=api-gateway \
              -e EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=10 \
              -e EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS=20 \
              -e SPRING_SECURITY_USER_NAME=craftpilot \
              -e SPRING_SECURITY_USER_PASSWORD="${EUREKA_PASSWORD}" \
              -e SPRING_CLOUD_CONFIG_ENABLED=false \
              -e SPRING_CLOUD_DISCOVERY_ENABLED=true \
              -e SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE="health,info" \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e MANAGEMENT_INFO_ENV_ENABLED=true \
              -e SPRING_MAIN_ALLOW_BEAN_DEFINITION_OVERRIDING=true \
              -e SPRING_CLOUD_LOADBALANCER_RIBBON_ENABLED=false \
              -e SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED=true \
              -e SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID=true \
              -e SPRING_JSON_DESERIALIZATION_FAIL_ON_UNKNOWN_PROPERTIES=false \
              -e SPRING_JACKSON_DESERIALIZATION_FAIL_ON_UNKNOWN_PROPERTIES=false \
              -e SPRING_JACKSON_SERIALIZATION_FAIL_ON_EMPTY_BEANS=false \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD="${REDIS_PASSWORD}" \
              -e JAVA_TOOL_OPTIONS="-Xms512m -Xmx1024m -XX:+UseG1GC -Dspring.cloud.config.enabled=false -Dspring.cloud.discovery.enabled=true -Dspring.cloud.compatibility-verifier.enabled=false -Deureka.client.serviceUrl.defaultZone=http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/ -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true" \
              $DOCKERHUB_USERNAME/api-gateway:latest-arm64

            # Enhanced Gateway health check with retries
            echo "=== Waiting for API Gateway ==="
            max_attempts=30
            counter=0

            while [ $counter -lt $max_attempts ]; do
              echo "Health check attempt $((counter + 1))/$max_attempts"
              
              # Container status check
              if ! docker ps -q -f name=api-gateway >/dev/null 2>&1; then
                echo "Container is not running"
                docker logs api-gateway
                exit 1
              fi
              
              # Application logs check
              if docker logs api-gateway 2>&1 | grep -q "Started ApiGatewayApplication"; then
                echo "✓ Application started"
                
                # Eureka registration check
                if curl -s -u craftpilot:"${EUREKA_PASSWORD}" http://localhost:8761/eureka/apps/API-GATEWAY | grep -q "<app>API-GATEWAY</app>"; then
                  echo "✓ Successfully registered with Eureka"
                  
                  # Final health check
                  if curl -sf http://localhost:8080/actuator/health | grep -q "UP"; then
                    echo "✓ Health check passed"
                    exit 0
                  fi
                fi
              fi
              
              # Show logs periodically
              if [ $((counter % 5)) -eq 0 ]; then
                echo "=== Recent Logs ==="
                docker logs --tail 50 api-gateway
                echo "=== End Logs ==="
              fi
              
              ((counter++))
              sleep 10
            done

            echo "Failed to verify API Gateway deployment"
            docker logs api-gateway
            exit 1

  deploy-core:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Core Services
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD
          script: |
            # Quick cleanup function
            cleanup_container() {
              local name=$1
              if docker ps -a --format '{{.Names}}' | grep -q "^${name}$"; then
                echo "Cleaning up ${name}..."
                docker stop ${name} >/dev/null 2>&1
                docker rm ${name} >/dev/null 2>&1
              fi
            }

            # Agresif cleanup
            cleanup_container "eureka-server"
            cleanup_container "api-gateway"

            # Hızlı image pull
            echo "Pulling images silently..."
            docker pull ${DOCKERHUB_USERNAME}/eureka-server:latest-arm64 >/dev/null 2>&1 &
            docker pull ${DOCKERHUB_USERNAME}/api-gateway:latest-arm64 >/dev/null 2>&1 &
            wait

            # Eureka başlatma ve hızlı health check
            echo "Starting Eureka Server..."
            docker run -d --name eureka-server \
              --network craftpilot-network \
              --ip 172.20.0.13 \
              -p 8761:8761 \
              -e JAVA_OPTS="-XX:+UseParallelGC -Xms256m -Xmx512m -Dspring.cloud.config.enabled=false -Dspring.output.ansi.enabled=NEVER" \
              -e SERVER_PORT=8761 \
              -e EUREKA_CLIENT_REGISTER_WITH_EUREKA=false \
              -e EUREKA_CLIENT_FETCH_REGISTRY=false \
              -e EUREKA_USERNAME=craftpilot \
              -e EUREKA_PASSWORD=${EUREKA_PASSWORD} \
              ${DOCKERHUB_USERNAME}/eureka-server:latest-arm64

            # Paralel health check
            echo "Verifying Eureka..."
            eureka_ready=false
            for i in {1..20}; do
              # Container durumunu kontrol et
              if ! docker ps -q -f name=eureka-server >/dev/null 2>&1; then
                echo "Eureka container failed!"
                docker logs eureka-server
                exit 1
              fi
              
              # Logları kontrol et
              if docker logs eureka-server 2>&1 | grep -q "Started EurekaServer"; then
                echo "✓ Eureka is ready (detected from logs)"
                eureka_ready=true
                break
              fi
              
              # Health endpoint kontrol et
              if curl -s -f "http://localhost:8761/actuator/health" >/dev/null 2>&1; then
                echo "✓ Eureka is ready (health check passed)"
                eureka_ready=true
                break
              fi
              
              echo -n "."
              sleep 1
            done

            if [ "$eureka_ready" = false ]; then
              echo "Eureka failed to start properly!"
              docker logs eureka-server
              exit 1
            fi

            # API Gateway deployment
            echo "Deploying API Gateway..."
            docker run -d --name api-gateway \
              --network craftpilot-network \
              --hostname api-gateway \
              --ip 172.20.0.14 \
              -p 8080:8080 \
              -v /opt/craftpilot/gcp-credentials.json:/app/config/gcp-credentials.json:ro \
              -e JAVA_OPTS="-XX:+UseParallelGC -Xms256m -Xmx512m -Dspring.cloud.config.enabled=false" \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8080 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_HOSTNAME=api-gateway \
              -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
              -e SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED=true \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e SPRING_APPLICATION_NAME=api-gateway \
              -e REDIS_HOST=redis \
              -e REDIS_PASSWORD=${REDIS_PASSWORD} \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json \
              ${DOCKERHUB_USERNAME}/api-gateway:latest-arm64

            # Enhanced Gateway health check with Eureka registration verification
            echo "Verifying Gateway and Eureka Registration..."
            max_attempts=10
            counter=0

            while [ $counter -lt $max_attempts ]; do
              echo "Health check attempt $((counter + 1))/$max_attempts"
              
              # Container ve uygulama durumu kontrolü
              if docker ps --format '{{.Status}}' -f name=api-gateway | grep -q "Up" && \
                 docker logs api-gateway 2>&1 | grep -q "Started ApiGatewayApplication" && \
                 curl -sf http://localhost:8761/eureka/apps/API-GATEWAY > /dev/null; then
                
                echo "✓ API Gateway is running and registered with Eureka"
                exit 0
              fi
              
              echo "Waiting for next check..."
              docker logs --tail 50 api-gateway
              sleep 10
              counter=$((counter + 1))
            done

            echo "API Gateway failed to start or register with Eureka!"
            docker logs api-gateway
            exit 1

  deploy-core-services:
    needs: deploy-core
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "eureka-server", port: 8761 },
            { name: "api-gateway", port: 8080 },
          ]
    steps:
      - uses: actions/checkout@v3
      - name: Deploy ${{ matrix.service.name }}
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD
          script: |
            if [ "${{ matrix.service.name }}" = "api-gateway" ]; then
              echo "=== Deploying API Gateway ==="
              docker pull ${DOCKERHUB_USERNAME}/api-gateway:latest-arm64
              docker stop api-gateway || true
              docker rm api-gateway || true

            docker run -d \
              --name api-gateway \
              --hostname api-gateway \
              --network craftpilot-network \
              --ip 172.20.0.14 \
              --restart unless-stopped \
              -p 8080:8080 \
              -v /opt/craftpilot/gcp-credentials.json:/app/config/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8080 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_HOSTNAME=api-gateway \
              -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              -e SPRING_CLOUD_CONFIG_ENABLED=false \
              -e SPRING_SECURITY_BASIC_ENABLED=false \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e SPRING_APPLICATION_NAME=api-gateway \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64

              # Health check with shorter timeout
              echo "=== Waiting for API Gateway ==="
              for i in {1..3}; do
                echo "Health check attempt $i/3..."
                if docker ps --filter "name=api-gateway" --format '{{.Status}}' | grep -q "Up"; then
                  sleep 5
                  if curl -sf http://localhost:8080/actuator/health; then
                    echo "Health check passed"
                    exit 0
                  fi
                fi
                echo "Container logs:"
                docker logs --since=30s api-gateway
                sleep 10
              done

              echo "API Gateway failed to start"
              docker logs api-gateway
              exit 1

            elif [ "${{ matrix.service.name }}" = "eureka-server" ]; then
              echo "=== Deploying ${{ matrix.service.name }} ==="

              # Pull and start service
              docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64
              docker stop ${{ matrix.service.name }} || true
              docker rm ${{ matrix.service.name }} || true

              docker run -d \
                --name ${{ matrix.service.name }} \
                --network craftpilot-network \
                --ip 172.20.0.13 \
                -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e EUREKA_USERNAME=craftpilot \
                -e EUREKA_PASSWORD=${EUREKA_PASSWORD} \
                -e SERVER_PORT=${{ matrix.service.port }} \
                ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64

              # Initial wait
              echo "Waiting for container to initialize..."
              sleep 30

              # Verify container is running
              if ! docker ps | grep -q ${{ matrix.service.name }}; then
                echo "Container failed to start"
                docker logs ${{ matrix.service.name }}
                exit 1
              fi

              # Enhanced health check
              for i in {1..5}; do
                echo "Health check attempt $i/5..."
                
                # Check container logs for startup completion
                if docker logs ${{ matrix.service.name }} | grep -q "Started .* in"; then
                  echo "Application startup completed"
                  
                  # Verify health endpoint
                  if curl -sf http://localhost:${{ matrix.service.port }}/actuator/health; then
                    echo "${{ matrix.service.name }} is healthy"
                    exit 0
                  fi
                fi
                
                # Show recent logs
                echo "Recent logs:"
                docker logs --tail 20 ${{ matrix.service.name }}
                
                sleep 10
              done

              echo "${{ matrix.service.name }} failed health check"
              docker logs ${{ matrix.service.name }}
              exit 1
            fi

  deploy-data-services:
    needs: deploy-core
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "redis-service", port: 8079 },
            { name: "kafka-service", port: 9093 },
            { name: "user-service", port: 8060 },
          ]
    steps:
      - name: Deploy ${{ matrix.service.name }}
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD,GCP_SA_KEY
          script: |
            # Setup GCP credentials if needed
            if [ ! -f "/opt/craftpilot/gcp-credentials.json" ]; then
              mkdir -p /opt/craftpilot
              echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
              chmod 600 /opt/craftpilot/gcp-credentials.json
            fi

            # Deploy service
            docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64
            docker stop ${{ matrix.service.name }} || true
            docker rm ${{ matrix.service.name }} || true

            docker run -d \
              --name ${{ matrix.service.name }} \
              --network craftpilot-network \
              --ip 172.20.0.15 \
              -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
              -v /opt/craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/ \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=${REDIS_PASSWORD} \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
              ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64

            # Health check
            for i in {1..5}; do
              if curl -sf http://localhost:${{ matrix.service.port }}/actuator/health; then
                echo "${{ matrix.service.name }} is healthy"
                exit 0
              fi
              sleep 10
            done

            echo "${{ matrix.service.name }} failed health check"
            docker logs ${{ matrix.service.name }}
            exit 1

  deploy-business-services:
    needs: deploy-data-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "credit-service", port: 8058 },
            { name: "subscription-service", port: 8052 },
            { name: "llm-service", port: 8062 },
            { name: "image-service", port: 8056 },
          ]
    steps:
      - name: Deploy ${{ matrix.service.name }}
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD,GCP_SA_KEY
          script: |
            # Setup GCP credentials if needed
            if [ ! -f "/opt/craftpilot/gcp-credentials.json" ]; then
              mkdir -p /opt/craftpilot
              echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
              chmod 600 /opt/craftpilot/gcp-credentials.json
            fi

            # Deploy service
            docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64
            docker stop ${{ matrix.service.name }} || true
            docker rm ${{ matrix.service.name }} || true

            docker run -d \
              --name ${{ matrix.service.name }} \
              --network craftpilot-network \
              --ip 172.20.0.18 \
              -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
              -v /opt/craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/ \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=${REDIS_PASSWORD} \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
              ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64

            # Health check
            for i in {1..5}; do
              if curl -sf http://localhost:${{ matrix.service.port }}/actuator/health; then
                echo "${{ matrix.service.name }} is healthy"
                exit 0
              fi
              sleep 10
            done

            echo "${{ matrix.service.name }} failed health check"
            docker logs ${{ matrix.service.name }}
            exit 1

  deploy-auxiliary-services:
    needs: deploy-business-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "notification-service", port: 8053 },
            { name: "analytics-service", port: 8064 },
            { name: "admin-service", port: 8063 },
          ]
    steps:
      - name: Deploy ${{ matrix.service.name }}
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD,GCP_SA_KEY
          script: |
            # Setup GCP credentials if needed
            if [ ! -f "/opt/craftpilot/gcp-credentials.json" ]; then
              mkdir -p /opt/craftpilot
              echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
              chmod 600 /opt/craftpilot/gcp-credentials.json
            fi

            # Deploy service
            docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64
            docker stop ${{ matrix.service.name }} || true
            docker rm ${{ matrix.service.name }} || true

            docker run -d \
              --name ${{ matrix.service.name }} \
              --network craftpilot-network \
              --ip 172.20.0.22 \
              -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
              -v /opt/craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/ \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=${REDIS_PASSWORD} \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
              ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64

            # Health check
            for i in {1..5}; do
              if curl -sf http://localhost:${{ matrix.service.port }}/actuator/health; then
                echo "${{ matrix.service.name }} is healthy"
                exit 0
              fi
              sleep 10
            done

            echo "${{ matrix.service.name }} failed health check"
            docker logs ${{ matrix.service.name }}
            exit 1

  deploy-monitoring:
    needs: deploy-auxiliary-services
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Monitoring Stack
        uses: appleboy/ssh-action@master
        env:
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GRAFANA_ADMIN_PASSWORD
          script: |
            # Deploy Prometheus
            docker pull prom/prometheus:v2.49.1
            docker stop prometheus || true
            docker rm prometheus || true

            docker run -d \
              --name prometheus \
              --network craftpilot-network \
              --ip 172.20.0.25 \
              -p 9090:9090 \
              prom/prometheus:v2.49.1

            # Deploy Grafana
            docker pull grafana/grafana:10.3.1
            docker stop grafana || true
            docker rm grafana || true

            docker run -d \
              --name grafana \
              --network craftpilot-network \
              --ip 172.20.0.26 \
              -p 3000:3000 \
              -e GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD} \
              grafana/grafana:10.3.1

  verify-deployment:
    needs: [deploy-monitoring]
    runs-on: ubuntu-latest
    steps:
      - name: Verify All Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Verifying all services..."

            # Check infrastructure
            docker ps | grep redis
            docker ps | grep zookeeper
            docker ps | grep kafka

            # Check core services
            curl -sf http://localhost:8761/actuator/health
            curl -sf http://localhost:8080/actuator/health

            # Check all services
            docker ps --format "{{.Names}}" | while read container; do
              echo "Checking $container..."
              docker logs --tail 10 $container
            done
