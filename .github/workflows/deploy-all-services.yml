name: Deploy All Services

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-deploy-services]

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Base Infrastructure
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Cleaning up existing network and containers..."
            # Tüm containerlari durdur
            docker stop $(docker ps -aq) || true
            docker rm $(docker ps -aq) || true

            # Ağı tamamen temizle
            docker network disconnect -f craftpilot-network $(docker ps -aq) || true
            docker network rm craftpilot-network || true

            echo "Creating new network..."
            # Yeni ağı oluştur
            docker network create \
              --driver bridge \
              --subnet=172.20.0.0/16 \
              --ip-range=172.20.0.0/24 \
              --gateway=172.20.0.1 \
              craftpilot-network

            # Altyapı servislerini başlat
            echo "Starting Redis..."
            docker run -d \
              --name redis \
              --network craftpilot-network \
              --ip 172.20.0.10 \
              -p 6379:6379 \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              redis:latest redis-server --requirepass ${{ secrets.REDIS_PASSWORD }}

            # Redis kontrolü
            sleep 10
            if ! docker exec redis redis-cli -a ${{ secrets.REDIS_PASSWORD }} ping | grep -q "PONG"; then
              echo "Redis failed to start"
              docker logs redis
              exit 1
            fi

            echo "Starting Zookeeper..."
            docker run -d \
              --name zookeeper \
              --network craftpilot-network \
              --ip 172.20.0.11 \
              -e ZOOKEEPER_CLIENT_PORT=2181 \
              -e ZOOKEEPER_TICK_TIME=2000 \
              confluentinc/cp-zookeeper:latest

            sleep 15

            echo "Starting Kafka..."
            docker run -d \
              --name kafka \
              --network craftpilot-network \
              --ip 172.20.0.12 \
              -p 9092:9092 \
              -e KAFKA_BROKER_ID=1 \
              -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
              -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092 \
              -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT \
              -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092 \
              -e KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT \
              -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
              confluentinc/cp-kafka:latest

            # Verify Kafka
            sleep 30
            docker logs kafka
            if ! docker ps | grep -q kafka; then
              echo "Kafka failed to start"
              exit 1
            fi

            # Test Kafka connection
            docker exec kafka kafka-topics --create --if-not-exists \
              --bootstrap-server localhost:9092 \
              --replication-factor 1 \
              --partitions 1 \
              --topic test || exit 1

            sleep 20

  deploy-core-services:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "eureka-server", port: 8761 },
            { name: "api-gateway", port: 8080 },
          ]
    steps:
      - uses: actions/checkout@v3
      - name: Deploy ${{ matrix.service.name }}
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD
          script: |
            if [ "${{ matrix.service.name }}" = "api-gateway" ]; then
              echo "=== Deploying API Gateway ==="
              docker pull ${DOCKERHUB_USERNAME}/api-gateway:latest-arm64
              docker stop api-gateway || true
              docker rm api-gateway || true

            docker run -d \
              --name api-gateway \
              --hostname api-gateway \
              --network craftpilot-network \
              --ip 172.20.0.14 \
              --restart unless-stopped \
              -p 8080:8080 \
              -v /opt/craftpilot/gcp-credentials.json:/app/config/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SERVER_PORT=8080 \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e EUREKA_INSTANCE_HOSTNAME=api-gateway \
              -e EUREKA_INSTANCE_PREFER_IP_ADDRESS=false \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              -e SPRING_CLOUD_CONFIG_ENABLED=false \
              -e SPRING_SECURITY_BASIC_ENABLED=false \
              -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e SPRING_APPLICATION_NAME=api-gateway \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest-arm64

              # Health check with shorter timeout
              echo "=== Waiting for API Gateway ==="
              for i in {1..3}; do
                echo "Health check attempt $i/3..."
                if docker ps --filter "name=api-gateway" --format '{{.Status}}' | grep -q "Up"; then
                  sleep 5
                  if curl -sf http://localhost:8080/actuator/health; then
                    echo "Health check passed"
                    exit 0
                  fi
                fi
                echo "Container logs:"
                docker logs --since=30s api-gateway
                sleep 10
              done

              echo "API Gateway failed to start"
              docker logs api-gateway
              exit 1

            elif [ "${{ matrix.service.name }}" = "eureka-server" ]; then
              echo "=== Deploying ${{ matrix.service.name }} ==="

              # Pull and start service
              docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64
              docker stop ${{ matrix.service.name }} || true
              docker rm ${{ matrix.service.name }} || true

              docker run -d \
                --name ${{ matrix.service.name }} \
                --network craftpilot-network \
                --ip 172.20.0.13 \
                -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e EUREKA_USERNAME=craftpilot \
                -e EUREKA_PASSWORD=${EUREKA_PASSWORD} \
                -e SERVER_PORT=${{ matrix.service.port }} \
                ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64

              # Initial wait
              echo "Waiting for container to initialize..."
              sleep 30

              # Verify container is running
              if ! docker ps | grep -q ${{ matrix.service.name }}; then
                echo "Container failed to start"
                docker logs ${{ matrix.service.name }}
                exit 1
              fi

              # Enhanced health check
              for i in {1..5}; do
                echo "Health check attempt $i/5..."
                
                # Check container logs for startup completion
                if docker logs ${{ matrix.service.name }} | grep -q "Started .* in"; then
                  echo "Application startup completed"
                  
                  # Verify health endpoint
                  if curl -sf http://localhost:${{ matrix.service.port }}/actuator/health; then
                    echo "${{ matrix.service.name }} is healthy"
                    exit 0
                  fi
                fi
                
                # Show recent logs
                echo "Recent logs:"
                docker logs --tail 20 ${{ matrix.service.name }}
                
                sleep 10
              done

              echo "${{ matrix.service.name }} failed health check"
              docker logs ${{ matrix.service.name }}
              exit 1
            fi

  deploy-data-services:
    needs: deploy-core-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "redis-service", port: 8079 },
            { name: "kafka-service", port: 9093 },
            { name: "user-service", port: 8060 },
          ]
    steps:
      - name: Deploy ${{ matrix.service.name }}
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD,GCP_SA_KEY
          script: |
            # Setup GCP credentials if needed
            if [ ! -f "/opt/craftpilot/gcp-credentials.json" ]; then
              mkdir -p /opt/craftpilot
              echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
              chmod 600 /opt/craftpilot/gcp-credentials.json
            fi

            # Deploy service
            docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64
            docker stop ${{ matrix.service.name }} || true
            docker rm ${{ matrix.service.name }} || true

            docker run -d \
              --name ${{ matrix.service.name }} \
              --network craftpilot-network \
              --ip 172.20.0.15 \
              -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
              -v /opt/craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/ \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=${REDIS_PASSWORD} \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
              ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64

            # Health check
            for i in {1..5}; do
              if curl -sf http://localhost:${{ matrix.service.port }}/actuator/health; then
                echo "${{ matrix.service.name }} is healthy"
                exit 0
              fi
              sleep 10
            done

            echo "${{ matrix.service.name }} failed health check"
            docker logs ${{ matrix.service.name }}
            exit 1

  deploy-business-services:
    needs: deploy-data-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "credit-service", port: 8058 },
            { name: "subscription-service", port: 8052 },
            { name: "llm-service", port: 8062 },
            { name: "image-service", port: 8056 },
          ]
    steps:
      - name: Deploy ${{ matrix.service.name }}
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD,GCP_SA_KEY
          script: |
            # Setup GCP credentials if needed
            if [ ! -f "/opt/craftpilot/gcp-credentials.json" ]; then
              mkdir -p /opt/craftpilot
              echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
              chmod 600 /opt/craftpilot/gcp-credentials.json
            fi

            # Deploy service
            docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64
            docker stop ${{ matrix.service.name }} || true
            docker rm ${{ matrix.service.name }} || true

            docker run -d \
              --name ${{ matrix.service.name }} \
              --network craftpilot-network \
              --ip 172.20.0.18 \
              -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
              -v /opt/craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/ \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=${REDIS_PASSWORD} \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
              ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64

            # Health check
            for i in {1..5}; do
              if curl -sf http://localhost:${{ matrix.service.port }}/actuator/health; then
                echo "${{ matrix.service.name }} is healthy"
                exit 0
              fi
              sleep 10
            done

            echo "${{ matrix.service.name }} failed health check"
            docker logs ${{ matrix.service.name }}
            exit 1

  deploy-auxiliary-services:
    needs: deploy-business-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "notification-service", port: 8053 },
            { name: "analytics-service", port: 8064 },
            { name: "admin-service", port: 8063 },
          ]
    steps:
      - name: Deploy ${{ matrix.service.name }}
        uses: appleboy/ssh-action@master
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          EUREKA_PASSWORD: ${{ secrets.EUREKA_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKERHUB_USERNAME,EUREKA_PASSWORD,REDIS_PASSWORD,GCP_SA_KEY
          script: |
            # Setup GCP credentials if needed
            if [ ! -f "/opt/craftpilot/gcp-credentials.json" ]; then
              mkdir -p /opt/craftpilot
              echo "${GCP_SA_KEY}" > /opt/craftpilot/gcp-credentials.json
              chmod 600 /opt/craftpilot/gcp-credentials.json
            fi

            # Deploy service
            docker pull ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64
            docker stop ${{ matrix.service.name }} || true
            docker rm ${{ matrix.service.name }} || true

            docker run -d \
              --name ${{ matrix.service.name }} \
              --network craftpilot-network \
              --ip 172.20.0.22 \
              -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
              -v /opt/craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:${EUREKA_PASSWORD}@eureka-server:8761/eureka/ \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=${REDIS_PASSWORD} \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
              ${DOCKERHUB_USERNAME}/${{ matrix.service.name }}:latest-arm64

            # Health check
            for i in {1..5}; do
              if curl -sf http://localhost:${{ matrix.service.port }}/actuator/health; then
                echo "${{ matrix.service.name }} is healthy"
                exit 0
              fi
              sleep 10
            done

            echo "${{ matrix.service.name }} failed health check"
            docker logs ${{ matrix.service.name }}
            exit 1

  deploy-monitoring:
    needs: deploy-auxiliary-services
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Monitoring Stack
        uses: appleboy/ssh-action@master
        env:
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GRAFANA_ADMIN_PASSWORD
          script: |
            # Deploy Prometheus
            docker pull prom/prometheus:v2.49.1
            docker stop prometheus || true
            docker rm prometheus || true

            docker run -d \
              --name prometheus \
              --network craftpilot-network \
              --ip 172.20.0.25 \
              -p 9090:9090 \
              prom/prometheus:v2.49.1

            # Deploy Grafana
            docker pull grafana/grafana:10.3.1
            docker stop grafana || true
            docker rm grafana || true

            docker run -d \
              --name grafana \
              --network craftpilot-network \
              --ip 172.20.0.26 \
              -p 3000:3000 \
              -e GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD} \
              grafana/grafana:10.3.1

  verify-deployment:
    needs: [deploy-monitoring]
    runs-on: ubuntu-latest
    steps:
      - name: Verify All Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Verifying all services..."

            # Check infrastructure
            docker ps | grep redis
            docker ps | grep zookeeper
            docker ps | grep kafka

            # Check core services
            curl -sf http://localhost:8761/actuator/health
            curl -sf http://localhost:8080/actuator/health

            # Check all services
            docker ps --format "{{.Names}}" | while read container; do
              echo "Checking $container..."
              docker logs --tail 10 $container
            done
