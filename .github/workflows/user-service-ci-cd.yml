name: User Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "user-service/**"
      - ".github/workflows/user-service-ci-cd.yml"
  pull_request:
    branches: [master]
    paths:
      - "user-service/**"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./user-service
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./user-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/user-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/user-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/user-service:buildcache-arm64,mode=max

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: "20m"
          debug: true
          script: |
            set -e  # Exit on any error

            echo "=== Testing SSH Connection ==="
            whoami
            pwd

            echo "=== System Architecture ==="
            uname -m

            echo "=== Testing Directory Access ==="
            mkdir -p /opt/craftpilot

            echo "=== Continuing with Deployment ==="
            echo '${{ secrets.GCP_SA_KEY }}' > /opt/craftpilot/gcp-credentials.json
            chmod 600 /opt/craftpilot/gcp-credentials.json

            echo "=== Verifying Docker Status ==="
            if ! systemctl is-active --quiet docker; then
              echo "Docker is not running. Starting Docker..."
              sudo systemctl start docker
            fi

            docker network create craftpilot-network || true

            echo "=== Ensuring Redis is Running ==="
            if ! docker ps --filter "name=redis" --format '{{.Names}}' | grep -q "^redis$"; then
              echo "Starting Redis container..."
              docker run -d \
                --name redis \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 6379:6379 \
                redis:latest
            fi

            echo "=== Ensuring Eureka Server is Running ==="
            if ! docker ps --filter "name=eureka-server" --format '{{.Names}}' | grep -q "^eureka-server$"; then
              echo "Starting Eureka Server container..."
              docker run -d \
                --name eureka-server \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8761:8761 \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e EUREKA_USERNAME=craftpilot \
                -e EUREKA_PASSWORD=13579ada \
                ${{ secrets.DOCKERHUB_USERNAME }}/eureka-server:latest-arm64
            fi

            echo "=== Setting up GCP Credentials ==="
            sudo mkdir -p /opt/craftpilot/gcp
            echo '${{ secrets.GCP_SA_KEY }}' | sudo tee /opt/craftpilot/gcp/credentials.json > /dev/null
            sudo chmod 644 /opt/craftpilot/gcp/credentials.json
            sudo chown 1000:1000 /opt/craftpilot/gcp/credentials.json

            echo "=== Deploying User Service ==="
            # Force pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest-arm64

            echo "=== Stopping Old Container ==="
            docker rm -f user-service || true

            echo "=== Starting User Service ==="
            docker run -d \
              --name user-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8060:8060 \
              -v /opt/craftpilot/gcp/credentials.json:/etc/gcp/credentials/gcp-credentials.json:ro \
              -e GOOGLE_APPLICATION_CREDENTIALS=/etc/gcp/credentials/gcp-credentials.json \
              -e FIREBASE_CONFIG_PATH=/etc/gcp/credentials/gcp-credentials.json \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_USERNAME=craftpilot \
              -e EUREKA_PASSWORD=13579ada \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              --user 1000:1000 \
              ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest-arm64

            echo "=== Waiting for Service to Start ==="
            for i in {1..30}; do
              if docker ps --filter "name=user-service" --format '{{.Status}}' | grep -q "Up"; then
                echo "User service is running"
                # Check application health
                if curl -f http://localhost:8060/actuator/health; then
                  echo "User service is healthy"
                  exit 0
                fi
              fi
              echo "Waiting for service to start... Attempt $i"
              sleep 10
            done

            echo "=== Service Failed to Start - Showing Logs ==="
            docker logs user-service
            exit 1

      - name: Trigger Deploy Services Workflow
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          event-type: trigger-deploy-services
