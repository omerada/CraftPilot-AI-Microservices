name: User Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "user-service/**"
      - ".github/workflows/user-service-ci-cd.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - debug

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: |
          cd user-service
          mvn clean package -DskipTests

      - name: Prepare build context
        run: |
          # Create a temporary directory for build context
          mkdir -p /tmp/docker-build-context

          # Check source directories and files
          echo "Current directory: $(pwd)"
          echo "Checking user-service directory:"
          ls -la user-service/

          # Ensure user-service and redis-client-lib directories exist
          if [ ! -d "user-service" ]; then
            echo "ERROR: user-service directory not found"
            exit 1
          fi

          if [ ! -d "redis-client-lib" ]; then
            echo "ERROR: redis-client-lib directory not found"
            exit 1
          fi

          # Copy both directories to build context
          cp -r user-service /tmp/docker-build-context/
          cp -r redis-client-lib /tmp/docker-build-context/

          # Verify build context contents
          echo "Checking build context:"
          ls -la /tmp/docker-build-context/
          echo "Checking user-service directory in build context:"
          ls -la /tmp/docker-build-context/user-service/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: /tmp/docker-build-context
          file: user-service/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/user-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/user-service:buildcache,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          command_timeout: "15m"
          script: |
            echo "Starting deployment of User Service..."

            # Credentials dosyası için izinleri ayarla
            sudo mkdir -p /opt/craftpilot/gcp
            sudo cp /opt/craftpilot/gcp-credentials.json /opt/craftpilot/gcp/
            sudo chown -R 1001:1001 /opt/craftpilot/gcp
            sudo chmod 640 /opt/craftpilot/gcp/gcp-credentials.json

            # Kafka ve Redis kontrolü
            if ! docker exec -t kafka kafka-topics --bootstrap-server localhost:9092 --list > /dev/null; then
              echo "Kafka is not available! Waiting for it to start..."
              sleep 30
              if ! docker exec -t kafka kafka-topics --bootstrap-server localhost:9092 --list > /dev/null; then
                echo "Kafka is still not available! Restarting Kafka..."
                docker restart kafka
                sleep 60
              fi
            fi

            # Kafka topic'lerin önceden oluşturulduğundan emin ol
            echo "Ensuring required Kafka topics exist..."
            docker exec -t kafka kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user-events --partitions 3 --replication-factor 1
            docker exec -t kafka kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user-activity --partitions 3 --replication-factor 1
            docker exec -t kafka kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic user-preferences --partitions 3 --replication-factor 1

            if ! docker exec -t redis redis-cli -a 13579ada ping | grep -q PONG; then
              echo "Redis is not available! Waiting for it to start..."
              sleep 10
              if ! docker exec -t redis redis-cli -a 13579ada ping | grep -q PONG; then
                echo "Redis is still not available! Restarting Redis..."
                docker restart redis
                sleep 30
              fi
            fi

            # Pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest-arm64
            docker stop user-service || true
            docker rm user-service || true

            # Debug ve prod modları için farklı container yapılandırması
            if [[ "${{ github.event.inputs.environment }}" == "debug" ]]; then
              docker run -d \
                --name user-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8060:8060 \
                -p 5005:5005 \
                -v /opt/craftpilot/gcp:/gcp:ro \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e KAFKA_CLIENT_ID=user-service \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e HOSTNAME=user-service \
                -e GOOGLE_APPLICATION_CREDENTIALS=/gcp/gcp-credentials.json \
                -e FIREBASE_CONFIG_PATH=/gcp/gcp-credentials.json \
                -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=file:/gcp/gcp-credentials.json \
                -e SPRING_SECURITY_USER_NAME=craftpilot \
                -e SPRING_SECURITY_USER_PASSWORD=13579ada \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e "MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*" \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e SPRING_KAFKA_ADMIN_AUTO_CREATE=false \
                -e "JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=70.0 -XX:+UseG1GC -Djava.security.egd=file:/dev/./urandom -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005" \
                --user 1001:1001 \
                --health-cmd="curl -f http://localhost:8060/actuator/health || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                --health-start-period=90s \
                ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest-arm64
            else
              docker run -d \
                --name user-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8060:8060 \
                -v /opt/craftpilot/gcp:/gcp:ro \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e KAFKA_CLIENT_ID=user-service \
                -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e HOSTNAME=user-service \
                -e GOOGLE_APPLICATION_CREDENTIALS=/gcp/gcp-credentials.json \
                -e FIREBASE_CONFIG_PATH=/gcp/gcp-credentials.json \
                -e SPRING_CLOUD_GCP_CREDENTIALS_LOCATION=file:/gcp/gcp-credentials.json \
                -e SPRING_SECURITY_USER_NAME=craftpilot \
                -e SPRING_SECURITY_USER_PASSWORD=13579ada \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e MANAGEMENT_ENDPOINTS_WEB_BASE_PATH=/actuator \
                -e "MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*" \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e SPRING_KAFKA_ADMIN_AUTO_CREATE=false \
                -e "JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=70.0 -XX:+UseG1GC -Djava.security.egd=file:/dev/./urandom" \
                --user 1001:1001 \
                --health-cmd="curl -f http://localhost:8060/actuator/health || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                --health-start-period=90s \
                ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest-arm64
            fi

            echo "=== Waiting for service startup ==="
            max_attempts=30
            counter=0

            while [ $counter -lt $max_attempts ]; do
              echo "Health check attempt $((counter + 1))/$max_attempts"
              
              # Container durumu kontrolü
              if ! docker ps --filter "name=user-service" --format '{{.Status}}' | grep -q "Up"; then
                echo "Container is not running. Checking logs..."
                docker logs user-service
                exit 1
              fi
              
              # Health check kontrolü
              HEALTH_CHECK=$(curl -s http://localhost:8060/actuator/health || echo "FAILED")
              if echo "$HEALTH_CHECK" | grep -q '"status":"UP"'; then
                echo "✓ Service is healthy"
                echo "=== Deployment completed successfully ==="
                exit 0
              fi
              
              echo "Waiting for service to start... ($((counter + 1))/$max_attempts)"
              sleep 10
              counter=$((counter + 1))
            done

            echo "=== Service failed to start - Debug Information ==="
            echo "Docker Status:"
            docker ps -a | grep user-service
            echo "Container Logs (last 100 lines):"
            docker logs user-service --tail 100
            exit 1
