name: Analytics Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "analytics-service/**"
      - ".github/workflows/analytics-service-ci-cd.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - prod
          - debug

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./analytics-service
    steps:
      - uses: actions/checkout@v3

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      # Docker Hub'a giriş yap
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      # Sadece ARM64 için build ve push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./analytics-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:buildcache-arm64,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # Hata durumunda script'i durdur

            echo "==== Analytics Service Deployment Starting ===="

            # Infrastructure containers - ağ kontrolü
            docker network create craftpilot-network 2>/dev/null || echo "Network already exists"

            # MongoDB konteyner adını sabit olarak craftpilot-mongodb olarak belirle
            MONGODB_CONTAINER="craftpilot-mongodb"

            # MongoDB container'ının sağlık durumunu kontrol et
            if ! docker ps --filter "name=$MONGODB_CONTAINER" --format '{{.Names}}' | grep -q "$MONGODB_CONTAINER"; then
              echo "UYARI: '$MONGODB_CONTAINER' container'ı bulunamadı veya çalışmıyor!"
              docker ps | grep -i mongo || echo "Hiçbir MongoDB container'ı bulunamadı!"
            else
              echo "MongoDB container'ı çalışıyor: $MONGODB_CONTAINER (status: $(docker inspect --format='{{.State.Health.Status}}' $MONGODB_CONTAINER 2>/dev/null || echo 'health status unavailable'))"
            fi

            # MongoDB URI konfigürasyonu - image-service ile uyumlu
            # Doğrudan secrets'tan URI kullan veya bileşenlerden oluştur
            if [ -n "${{ secrets.MONGODB_URI }}" ]; then
              # URI içindeki host adını craftpilot-mongodb olarak değiştir
              MONGODB_URI=$(echo "${{ secrets.MONGODB_URI }}" | sed 's/mongodb:27017/craftpilot-mongodb:27017/g' | sed 's/@mongodb:/@craftpilot-mongodb:/g')
              echo "Secrets'tan alınan MongoDB URI düzeltildi"
            else
              # Bileşenlerden URI oluşturma - craftpilot-mongodb host adıyla
              MONGODB_URI="mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@$MONGODB_CONTAINER:27017/craftpilot_analytics_db?authSource=admin&retryWrites=true&w=majority&serverSelectionTimeoutMS=30000&connectTimeoutMS=20000&socketTimeoutMS=60000"
              echo "Bileşenlerden MongoDB URI oluşturuldu"
            fi
            # Log çıktılarında parolayı maskele
            echo "MongoDB URI (maskelenmiş): $(echo $MONGODB_URI | sed 's/:[^:]*@/:\*\*\*@/g')"

            # MongoDB bağlantısını test et
            echo "MongoDB bağlantısı test ediliyor..."
            if docker run --rm --network craftpilot-network mongo:6.0 mongosh --quiet --eval "db.runCommand({ping:1}).ok" admin --host $MONGODB_CONTAINER --port 27017 -u ${{ secrets.MONGO_ROOT_USERNAME }} -p ${{ secrets.MONGO_ROOT_PASSWORD }} --authenticationDatabase admin | grep -q "1"; then
              echo "✅ MongoDB bağlantı testi başarılı!"
            else
              echo "⚠️ MongoDB bağlantı testi başarısız! Deployment devam edecek ancak servis başlangıçta hata verebilir."
              echo "MongoDB container'ının durumunu kontrol edin:"
              docker ps | grep -i mongo
              docker logs $MONGODB_CONTAINER --tail 20
            fi

            # GCP kimlik bilgilerini kontrol et ve oluştur (gerekirse)
            if [ ! -d "/craftpilot" ]; then
              sudo mkdir -p /craftpilot
              sudo chown $USER:$USER /craftpilot
            fi

            # GCP kimlik bilgilerini yetkilerle birlikte oluştur (eğer varsa)
            if [ -n "${{ secrets.GCP_SA_KEY }}" ]; then
              echo '${{ secrets.GCP_SA_KEY }}' > /craftpilot/gcp-credentials.json
              chmod 600 /craftpilot/gcp-credentials.json
            fi

            # Önceki konteynerı durdur ve kaldır
            echo "Önceki Analytics Service containeri durduruluyor (varsa)"
            docker stop analytics-service 2>/dev/null || true
            docker rm analytics-service 2>/dev/null || true

            # Environment tipine göre konteynerı başlat
            ENV="${{ github.event.inputs.environment || 'prod' }}"
            echo "Analytics Service containeri $ENV modunda başlatılıyor"

            if [ "$ENV" = "debug" ]; then
              # Debug modu için remote debugging özelliği ve gelişmiş izleme
              docker run -d \
                --name analytics-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8064:8064 \
                -p 5005:5005 \
                -v /craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SERVER_PORT=8064 \
                -e EUREKA_SERVER_URL=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e SPRING_DATA_MONGODB_URI="$MONGODB_URI" \
                -e SPRING_DATA_MONGODB_DATABASE="craftpilot_analytics_db" \
                -e MONGODB_HOST="$MONGODB_CONTAINER" \
                -e MONGO_ROOT_USERNAME="${{ secrets.MONGO_ROOT_USERNAME }}" \
                -e MONGO_ROOT_PASSWORD="${{ secrets.MONGO_ROOT_PASSWORD }}" \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e KAFKA_ENABLED=true \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e KAFKA_ADMIN_FAIL_FAST=false \
                -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus,loggers,env \
                -e MANAGEMENT_HEALTH_MONGODB_ENABLED=true \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true \
                -e LOGGING_LEVEL_COM_CRAFTPILOT=DEBUG \
                -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA_MONGODB=DEBUG \
                -e JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n -Xms512m -Xmx1g -XX:+UseContainerSupport" \
                ${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:latest-arm64
            else
              # Prod modu - image-service'e benzer şekilde optimize edilmiş
              docker run -d \
                --name analytics-service \
                --network craftpilot-network \
                --restart unless-stopped \
                -p 8064:8064 \
                -v /craftpilot/gcp-credentials.json:/app/gcp-credentials.json:ro \
                -e SPRING_PROFILES_ACTIVE=prod \
                -e SERVER_PORT=8064 \
                -e EUREKA_SERVER_URL=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
                -e SPRING_DATA_MONGODB_URI="$MONGODB_URI" \
                -e SPRING_DATA_MONGODB_DATABASE="craftpilot_analytics_db" \
                -e MONGODB_HOST="$MONGODB_CONTAINER" \
                -e MONGO_ROOT_USERNAME="${{ secrets.MONGO_ROOT_USERNAME }}" \
                -e MONGO_ROOT_PASSWORD="${{ secrets.MONGO_ROOT_PASSWORD }}" \
                -e REDIS_HOST=redis \
                -e REDIS_PORT=6379 \
                -e REDIS_PASSWORD=13579ada \
                -e KAFKA_ENABLED=true \
                -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
                -e KAFKA_ADMIN_FAIL_FAST=false \
                -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json \
                -e MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus \
                -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
                -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
                -e MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED=true \
                -e MANAGEMENT_HEALTH_READINESSSTATE_ENABLED=true \
                -e JAVA_OPTS="-Xms512m -Xmx1g -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -Dfile.encoding=UTF-8 -Djava.security.egd=file:/dev/./urandom" \
                ${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:latest-arm64
            fi

            # Container başlatma ve sağlık kontrolü - geliştirilmiş güvenilirlik
            echo "Container başlatma bekleniyor..."
            sleep 10

            # Container çalışıyor mu kontrol et
            if ! docker ps | grep -q analytics-service; then
              echo "HATA: Container başlatılamadı!"
              docker logs analytics-service
              exit 1
            fi

            echo "Sağlık kontrolü yapılıyor..."
            MAX_ATTEMPTS=30
            ATTEMPT=1
            HEALTH_OK=false

            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Sağlık kontrolü denemesi $ATTEMPT/$MAX_ATTEMPTS"
              
              # Container hala çalışıyor mu kontrol et
              if ! docker ps | grep -q analytics-service; then
                echo "HATA: Container beklenmedik şekilde durdu!"
                docker logs analytics-service --tail 100
                exit 1
              fi
              
              # MongoDB bağlantısını test et (özel deneme)
              if [ $ATTEMPT -eq 5 ]; then
                echo "MongoDB bağlantısı kontrol ediliyor..."
                docker exec analytics-service env | grep MONGODB || echo "MongoDB değişkenleri bulunamadı"
                docker exec analytics-service env | grep SPRING_DATA_MONGODB || echo "Spring MongoDB değişkenleri bulunamadı"
                
                if docker exec analytics-service nc -z -w 3 $MONGODB_CONTAINER 27017; then
                  echo "✅ MongoDB bağlantısı başarılı!"
                else
                  echo "⚠️ MongoDB bağlantısı başarısız! Network debug bilgileri:"
                  docker exec analytics-service ping -c 2 $MONGODB_CONTAINER || echo "ping başarısız"
                  docker network inspect craftpilot-network | grep -A 10 analytics-service
                  docker network inspect craftpilot-network | grep -A 10 $MONGODB_CONTAINER
                fi
              fi
              
              # Sağlık endpoint'ini kontrol et
              HEALTH_STATUS=$(curl -s http://localhost:8064/actuator/health || echo '{"status":"UNKNOWN"}')
              
              if echo $HEALTH_STATUS | grep -q '"status":"UP"'; then
                echo "✅ Servis sağlıklı! Deployment başarılı."
                HEALTH_OK=true
                break
              fi
              
              # Problem detaylarını göster
              if [ $ATTEMPT -eq 10 ]; then
                echo "MongoDB bileşeni kontrol ediliyor..."
                MONGO_HEALTH=$(curl -s http://localhost:8064/actuator/health/mongo || echo "unavailable")
                echo "MongoDB sağlık durumu: $MONGO_HEALTH"
                echo "Container içinden MongoDB URI testi:"
                docker exec analytics-service bash -c 'nc -zv $(echo $SPRING_DATA_MONGODB_URI | sed -n "s/.*@\([^:]*\).*/\1/p") 27017'
              fi
              
              # Kritik noktalarda daha detaylı bilgi
              if [ $ATTEMPT -eq 5 ] || [ $ATTEMPT -eq 15 ] || [ $ATTEMPT -eq 25 ]; then
                echo "Detaylı loglar ($ATTEMPT. deneme):"
                docker logs analytics-service --tail 50
              fi
              
              echo "Servis henüz hazır değil, bekleniyor..."
              sleep 10
              ATTEMPT=$((ATTEMPT + 1))
            done

            if [ "$HEALTH_OK" = "false" ]; then
              echo "⚠️ Servis zaman aşımı içinde sağlıklı duruma gelmedi."
              echo "Son container logları:"
              docker logs analytics-service --tail 100
              
              # Network bilgilerini kontrol et
              echo "Container network bilgileri:"
              docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' analytics-service
              echo "MongoDB container network bilgileri:"
              docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $MONGODB_CONTAINER
              
              echo "Deployment uyarılarla tamamlandı - servis tam olarak çalışmıyor olabilir."
              # Exit 1 yerine uyarı vermekle yetin, container çalışmaya devam etsin
            else
              echo "==== Analytics Service Deployment Başarıyla Tamamlandı ===="
            fi
