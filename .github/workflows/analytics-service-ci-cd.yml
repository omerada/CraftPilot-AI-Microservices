name: Analytics Service CI/CD

on:
  push:
    branches: [master]
    paths:
      - "analytics-service/**"
      - ".github/workflows/analytics-service-ci-cd.yml"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./analytics-service
    steps:
      - uses: actions/checkout@v3

      # QEMU kurulumu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # Docker Buildx kurulumu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64

      # Docker Hub'a giriş yap
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      # Sadece ARM64 için build ve push
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./analytics-service
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:latest-arm64
            ${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:buildcache-arm64,mode=max

      # Google Cloud kimlik doğrulaması
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      # Google Cloud CLI kurulumu
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          debug: true
          command_timeout: "20m"
          script: |
            echo "=== Testing Docker ==="
            docker version
            docker info
            docker ps

            # Infrastructure containers kontrol
            docker network create craftpilot-network || true

            # MongoDB container check
            MONGODB_CONTAINER="craftpilot-mongodb"
            if ! docker ps | grep -q "$MONGODB_CONTAINER"; then
              MONGODB_CONTAINER="mongodb"
              if ! docker ps | grep -q "$MONGODB_CONTAINER"; then
                echo "WARNING: Default MongoDB containers not found, checking for any mongodb container..."
                MONGODB_CONTAINER=$(docker ps --format '{{.Names}}' | grep -E 'mongo|mongodb' | head -n 1)
                if [ -z "$MONGODB_CONTAINER" ]; then
                  echo "ERROR: No MongoDB container found!"
                  MONGODB_CONTAINER="craftpilot-mongodb" # Fallback to default
                else
                  echo "Found MongoDB container: $MONGODB_CONTAINER"
                fi
              fi
            fi
            echo "Using MongoDB container: $MONGODB_CONTAINER"

            echo "=== Pulling ARM64 Image ==="
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:latest-arm64

            echo "=== Stopping Old Container ==="
            docker stop analytics-service || true
            docker rm analytics-service || true

            # MongoDB URI configuration - Kullanıcı adı ve şifre düzeltmesi
            MONGODB_URI="mongodb://${MONGO_ROOT_USERNAME:-adminuser}:${MONGO_ROOT_PASSWORD:-secure_password}@${MONGODB_CONTAINER}:27017/analytics?authSource=admin&retryWrites=true&w=majority&serverSelectionTimeoutMS=60000"
            echo "MongoDB URI: $(echo $MONGODB_URI | sed 's/:[^:]*@/:\*\*\*@/g')"

            echo "=== Starting New Container ==="
            docker run -d \
              --name analytics-service \
              --network craftpilot-network \
              --restart unless-stopped \
              -p 8064:8064 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://craftpilot:13579ada@eureka-server:8761/eureka/ \
              -e REDIS_HOST=redis \
              -e REDIS_PORT=6379 \
              -e REDIS_PASSWORD=13579ada \
              -e SPRING_DATA_MONGODB_URI="$MONGODB_URI" \
              -e SPRING_DATA_MONGODB_DATABASE=analytics \
              -e MONGODB_HOST=${MONGODB_CONTAINER} \
              -e MONGODB_PORT=27017 \
              -e MONGODB_USERNAME=${MONGO_ROOT_USERNAME:-adminuser} \
              -e MONGODB_PASSWORD=${MONGO_ROOT_PASSWORD:-secure_password} \
              -e MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always \
              -e MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true \
              -e MANAGEMENT_HEALTH_VALIDATE_GROUP_MEMBERSHIP=false \
              -e LOGGING_LEVEL_COM_CRAFTPILOT=DEBUG \
              -e KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \
              -e KAFKA_ENABLED=false \
              -e SPRING_DATA_MONGODB_AUTO_INDEX_CREATION=true \
              ${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:latest-arm64

            echo "=== Waiting for Container to Start ==="
            sleep 60

            echo "=== Container Logs ==="
            docker logs analytics-service

            echo "=== Health Check ==="
            max_attempts=12
            counter=0

            while [ $counter -lt $max_attempts ]; do
              echo "Health check attempt $((counter + 1))/$max_attempts"
              
              # Container durumu kontrolü
              if ! docker ps --filter "name=analytics-service" --format '{{.Status}}' | grep -q "Up"; then
                echo "Container is not running anymore. Checking logs..."
                docker logs analytics-service --tail 100
                exit 1
              fi
              
              # Health check
              if curl -f http://localhost:8064/actuator/health; then
                echo "Service is healthy!"
                exit 0
              fi
              
              echo "Waiting for service to start... Attempt $((counter + 1))/$max_attempts"
              sleep 20
              counter=$((counter + 1))
            done

            echo "Service failed health check"
            echo "=== Detailed Container Logs ==="
            docker logs analytics-service
            echo "=== Container Status ==="
            docker inspect analytics-service --format='{{.State.Status}}'
            echo "=== Health Check Status ==="
            docker inspect analytics-service --format='{{.State.Health.Status}}'
            exit 1
