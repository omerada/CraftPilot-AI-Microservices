spring:
  application:
    name: user-service
  data:
    mongodb:
      uri: mongodb://${MONGO_ROOT_USERNAME:craftpilot}:${MONGO_ROOT_PASSWORD:secure_password}@${MONGODB_HOST:craftpilot-mongodb}:27017/${MONGODB_DATABASE:craftpilot_user_db}?authSource=admin&retryWrites=true&w=majority
      database: ${MONGODB_DATABASE:craftpilot_user_db}
      auto-index-creation: true
  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:13579ada}
    timeout: 2000
    database: 0
  # Firestore'u devre dışı bırak
  cloud:
    gcp:
      firestore:
        enabled: false
      core:
        enabled: false

  kafka:
    enabled: true
    bootstrap-servers: ${KAFKA_BROKERS:kafka:9092}
    producer:
      retries: 3
      acks: 1
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        request.timeout.ms: 5000
        retry.backoff.ms: 1000
        max.block.ms: 5000
        # Bağlantı sorunlarında daha hızlı hata vermesi için
        delivery.timeout.ms: 10000

eureka:
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${server.port}
    metadata-map:
      user.name: ${eureka.client.security.user.name:craftpilot}
      user.password: ${eureka.client.security.user.password:13579ada}
  client:
    serviceUrl:
      defaultZone: http://${eureka.client.security.user.name:craftpilot}:${eureka.client.security.user.password:13579ada}@${EUREKA_HOST:eureka-server}:${EUREKA_PORT:8761}/eureka/
    register-with-eureka: ${EUREKA_REGISTER:true}
    fetch-registry: ${EUREKA_FETCH:true}
    enabled: ${EUREKA_ENABLED:true}
    healthcheck:
      enabled: true
    refresh:
      enable: true
    shouldDisableDelta: true
    registry-fetch-interval-seconds: 30
    security:
      user:
        name: ${EUREKA_USERNAME:craftpilot}
        password: ${EUREKA_PASSWORD:13579ada}

server:
  port: ${SERVER_PORT:8080}

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,info,loggers
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      group:
        readiness:
          include: diskSpace,redis
          show-details: always
        liveness:
          include: ping
          show-details: always
  health:
    redis:
      enabled: true
    livenessState:
      enabled: true
    readinessState:
      enabled: true
    diskspace:
      enabled: true
    circuitbreakers:
      enabled: true
    kafka:
      enabled: false
    mongodb:
      enabled: true
    validate-group-membership: false

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s # 30s yerine 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
      userOperations:
        baseConfig: default
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 60
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 5
        recordFailurePredicate: com.craftpilot.userservice.exception.UserOperationFailurePredicate
    instances:
      userPreferences:
        baseConfig: default
        slidingWindowSize: 8
        waitDurationInOpenState: 5s # Daha hızlı toparlanması için

      userRedis: # UserService için özel Redis devre kesici
        baseConfig: default
      redisCircuitBreaker: # Kütüphane için ortak Redis devre kesici
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        recordExceptions:
          - java.util.concurrent.TimeoutException
          - java.io.IOException
      kafkaPublisher:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 30s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry:
    instances:
      userPreferences:
        maxAttempts: 2
        waitDuration: 500ms
      redis:
        maxAttempts: 2
        waitDuration: 250ms
        retryExceptions:
          - java.util.concurrent.TimeoutException
          - java.io.IOException
  timelimiter:
    instances:
      userPreferences:
        timeoutDuration: 3s
        cancelRunningFuture: true

kafka:
  producer:
    timeout: 5
    enabled: true
  retry:
    backoff:
      initial-interval: 1000
      max-interval: 10000
      multiplier: 2.0
    max-attempts: 3
  topics:
    user-preferences: user-preferences
    user-events: user-events
    activity-events: activity-events
  topic:
    user-preferences: user-preferences

logging:
  level:
    root: INFO
    com.craftpilot: DEBUG
    com.craftpilot.userservice: DEBUG
    com.craftpilot.redis: INFO # DEBUG yerine INFO seviyesi
    org.springframework.data.redis: DEBUG
    org.springframework.boot.actuate: DEBUG
    org.springframework.web: INFO
    io.lettuce: INFO # DEBUG yerine INFO seviyesi

craftpilot:
  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:13579ada}
    database: 0
    connect-timeout: 1000ms # 2000ms'den 1000ms'e düşürüldü
    timeout: 800ms # 1000ms'den 800ms'e düşürüldü
    cache-ttl-hours: 24
    pool-max-active: 16 # 32'den 16'ya düşürüldü - daha verimli
    pool-max-idle: 8 # 16'dan 8'e düşürüldü
    pool-min-idle: 4 # 8'den 4'e düşürüldü
    pool-max-wait: 500ms # 1000ms'den 500ms'e düşürüldü
    circuit-breaker-enabled: true
    circuit-breaker-failure-rate-threshold: 50.0
    circuit-breaker-wait-duration-in-open-state: 10s # 30s yerine 10s
    circuit-breaker-permitted-calls-in-half-open-state: 3
    circuit-breaker-minimum-number-of-calls: 3
    retry-enabled: true
    max-retry-attempts: 2
    retry-wait-duration: 250ms # 500ms'den 250ms'e düşürüldü
    health-indicator-enabled: true

# Kullanıcı tercihleri operasyon timeout değeri
user-preference:
  operation:
    timeout: 1000 # 1 saniye timeout

# AI Model yapılandırmaları
app:
  load-models: ${LOAD_MODELS:true}
  models:
    file: ${MODELS_FILE:newmodels.json}
    version: ${MODELS_VERSION:1}
